{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nThis is a mobile-first Point of Sale (POS) and financial recording application for small and medium enterprises (UMKM), designed to replicate the core functionality of BukuWarung. The application enables small business owners to record transactions, manage inventory, track customer debts, and generate financial reports. It features a React frontend with a Node.js/Express backend, using PostgreSQL for data persistence and Drizzle ORM for database operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript, built using Vite for fast development and optimized builds\n- **UI Framework**: Tailwind CSS for styling with shadcn/ui component library for consistent, accessible UI components\n- **Mobile-First Design**: Responsive layout optimized for mobile devices with bottom navigation and touch-friendly interfaces\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod for validation and type safety\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the entire stack\n- **API Design**: RESTful API endpoints following conventional patterns\n- **Middleware**: Express middleware for request logging, JSON parsing, and error handling\n- **Development Tools**: tsx for TypeScript execution in development, esbuild for production builds\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless database hosting\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema Management**: Drizzle Kit for migrations and schema evolution\n- **Connection Pooling**: Neon serverless connection pooling for efficient database connections\n- **Offline Support**: Local storage-based queue system for offline transaction handling\n\n### Authentication and Authorization\n- **User Roles**: Multi-role system supporting owner, admin, and cashier roles\n- **Store Management**: Multi-store support with user permissions per store\n- **Session Management**: Planned JWT-based authentication (not yet implemented)\n\n### External Service Integrations\n- **WhatsApp Integration**: Planned WhatsApp Business API integration for automated customer debt reminders\n- **Payment Methods**: Support for multiple payment methods including cash, transfer, e-wallet, and QRIS\n- **File Storage**: Planned integration with cloud storage for receipt and document management\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library\n- **react-hook-form**: Form handling and validation\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema validation\n\n### UI and Styling Dependencies\n- **tailwindcss**: Utility-first CSS framework\n- **@radix-ui/***: Headless UI components for accessibility\n- **class-variance-authority**: Type-safe CSS class variants\n- **lucide-react**: Icon library\n- **clsx**: Conditional className utility\n\n### Database and Backend Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-zod**: Zod integration for Drizzle schemas\n- **connect-pg-simple**: PostgreSQL session store\n\n### Development and Build Dependencies\n- **vite**: Frontend build tool and development server\n- **@vitejs/plugin-react**: React support for Vite\n- **esbuild**: JavaScript bundler for backend builds\n- **tsx**: TypeScript execution for development\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Replit-specific development tools\n\n### Utility Dependencies\n- **date-fns**: Date manipulation library\n- **ws**: WebSocket client for database connections\n- **nanoid**: Unique ID generation","size_bytes":4072},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2991},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath, URL } from \"node:url\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1070},"scripts/populate-dummy-data.js":{"content":"import { Pool } from 'pg';\n\n// Koneksi database\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: false\n});\n\n// Data dummy\nconst dummyData = {\n  stores: [\n    {\n      name: 'Toko Sumber Rejeki',\n      address: 'Jl. Mawar No. 123, Jakarta Selatan',\n      phone: '021-12345678',\n      timezone: 'Asia/Jakarta',\n      currency: 'IDR',\n      lowStockThreshold: 5\n    },\n    {\n      name: 'Warung Bu Siti',\n      address: 'Jl. Melati No. 456, Bandung',\n      phone: '022-87654321', \n      timezone: 'Asia/Jakarta',\n      currency: 'IDR',\n      lowStockThreshold: 3\n    }\n  ],\n  products: [\n    { name: 'Beras Premium 5kg', sku: 'BRS001', priceBuy: 45000, priceSell: 52000, stock: 25, unit: 'karung', category: 'Sembako' },\n    { name: 'Minyak Goreng 2L', sku: 'MYG001', priceBuy: 28000, priceSell: 32000, stock: 15, unit: 'botol', category: 'Sembako' },\n    { name: 'Gula Pasir 1kg', sku: 'GLP001', priceBuy: 12000, priceSell: 14000, stock: 30, unit: 'kg', category: 'Sembako' },\n    { name: 'Teh Celup 25 pcs', sku: 'TEH001', priceBuy: 8000, priceSell: 10000, stock: 50, unit: 'kotak', category: 'Minuman' },\n    { name: 'Kopi Instan', sku: 'KOP001', priceBuy: 15000, priceSell: 18000, stock: 20, unit: 'sachet', category: 'Minuman' },\n    { name: 'Sabun Mandi', sku: 'SAB001', priceBuy: 3500, priceSell: 5000, stock: 40, unit: 'batang', category: 'Kebersihan' }\n  ],\n  customers: [\n    { name: 'Ibu Sari', phone: '08123456789', email: 'sari@email.com', address: 'Jl. Kenanga No. 10' },\n    { name: 'Pak Budi', phone: '08234567890', address: 'Jl. Anggrek No. 15' },\n    { name: 'Ibu Maya', phone: '08345678901', email: 'maya@email.com', address: 'Jl. Cempaka No. 20' },\n    { name: 'Pak Joko', phone: '08456789012', address: 'Jl. Dahlia No. 25' }\n  ],\n  cashFlowEntries: [\n    { type: 'income', amount: 500000, description: 'Penjualan hari ini', category: 'Penjualan' },\n    { type: 'expense', amount: 200000, description: 'Beli stok barang', category: 'Pembelian' },\n    { type: 'income', amount: 150000, description: 'Pelunasan piutang', category: 'Piutang' },\n    { type: 'expense', amount: 50000, description: 'Bayar listrik', category: 'Operasional' }\n  ]\n};\n\nasync function populateData() {\n  const client = await pool.connect();\n  \n  try {\n    console.log('🚀 Memulai populate data dummy...');\n    \n    // 1. Insert stores dan ambil ID\n    console.log('📦 Membuat toko...');\n    const storeIds = [];\n    for (const store of dummyData.stores) {\n      const result = await client.query(\n        `INSERT INTO stores (name, address, phone, timezone, currency, low_stock_threshold, created_at, updated_at) \n         VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW()) RETURNING id`,\n        [store.name, store.address, store.phone, store.timezone, store.currency, store.lowStockThreshold]\n      );\n      storeIds.push(result.rows[0].id);\n      console.log(`   ✅ ${store.name} - ID: ${result.rows[0].id}`);\n    }\n    \n    // 2. Insert products untuk setiap toko\n    console.log('📦 Menambah produk...');\n    for (const storeId of storeIds) {\n      for (const product of dummyData.products) {\n        await client.query(\n          `INSERT INTO products (store_id, name, sku, price_buy, price_sell, stock, unit, category, is_active, created_at, updated_at)\n           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, true, NOW(), NOW())`,\n          [storeId, product.name, `${product.sku}-${storeId.slice(-4)}`, product.priceBuy, product.priceSell, product.stock, product.unit, product.category]\n        );\n      }\n      console.log(`   ✅ ${dummyData.products.length} produk untuk toko ${storeId}`);\n    }\n    \n    // 3. Insert customers untuk setiap toko  \n    console.log('👥 Menambah pelanggan...');\n    const customerIds = [];\n    for (const storeId of storeIds) {\n      const storeCustomerIds = [];\n      for (const customer of dummyData.customers) {\n        const result = await client.query(\n          `INSERT INTO customers (store_id, name, phone, email, address, balance, created_at, updated_at)\n           VALUES ($1, $2, $3, $4, $5, 0, NOW(), NOW()) RETURNING id`,\n          [storeId, customer.name, customer.phone, customer.email || null, customer.address]\n        );\n        storeCustomerIds.push(result.rows[0].id);\n      }\n      customerIds.push(storeCustomerIds);\n      console.log(`   ✅ ${dummyData.customers.length} pelanggan untuk toko ${storeId}`);\n    }\n    \n    // 4. Insert cash flow entries\n    console.log('💰 Menambah arus kas...');\n    for (const storeId of storeIds) {\n      for (const entry of dummyData.cashFlowEntries) {\n        await client.query(\n          `INSERT INTO cash_flow_entries (store_id, type, amount, description, category, created_at, updated_at)\n           VALUES ($1, $2, $3, $4, $5, NOW(), NOW())`,\n          [storeId, entry.type, entry.amount, entry.description, entry.category]\n        );\n      }\n      console.log(`   ✅ ${dummyData.cashFlowEntries.length} entry arus kas untuk toko ${storeId}`);\n    }\n    \n    // 5. Buat beberapa transaksi dummy\n    console.log('🧾 Membuat transaksi...');\n    for (let i = 0; i < storeIds.length; i++) {\n      const storeId = storeIds[i];\n      const storeCustomerIds = customerIds[i];\n      \n      // Ambil beberapa produk untuk transaksi\n      const products = await client.query(\n        'SELECT id, name, price_sell FROM products WHERE store_id = $1 LIMIT 3',\n        [storeId]\n      );\n      \n      if (products.rows.length > 0) {\n        const items = products.rows.map(product => ({\n          productId: product.id,\n          productName: product.name,\n          quantity: Math.floor(Math.random() * 3) + 1,\n          price: parseFloat(product.price_sell),\n          discount: 0\n        }));\n        \n        const subtotal = items.reduce((sum, item) => sum + (item.quantity * item.price), 0);\n        \n        await client.query(\n          `INSERT INTO transactions (store_id, customer_id, invoice_number, items, subtotal, discount, tax, total, payment_status, payment_method, notes, created_at, updated_at)\n           VALUES ($1, $2, $3, $4, $5, 0, 0, $5, 'paid', 'cash', 'Transaksi contoh', NOW(), NOW())`,\n          [storeId, storeCustomerIds[0], `TRX-${Date.now()}-${i}`, JSON.stringify(items), subtotal]\n        );\n      }\n      console.log(`   ✅ Transaksi untuk toko ${storeId}`);\n    }\n    \n    // 6. Update user dengan store ID yang benar\n    console.log('👤 Update user store IDs...');\n    await client.query(\n      'UPDATE users SET store_ids = $1 WHERE email = $2',\n      [JSON.stringify(storeIds), 'admin@pos.com']\n    );\n    \n    console.log('🎉 Data dummy berhasil diisi!');\n    console.log(`📊 Summary:`);\n    console.log(`   - ${storeIds.length} toko`);\n    console.log(`   - ${dummyData.products.length * storeIds.length} produk`);\n    console.log(`   - ${dummyData.customers.length * storeIds.length} pelanggan`);\n    console.log(`   - ${dummyData.cashFlowEntries.length * storeIds.length} entry arus kas`);\n    console.log(`   - ${storeIds.length} transaksi`);\n    \n    // Tampilkan store IDs untuk referensi\n    console.log('\\n📋 Store IDs:');\n    for (let i = 0; i < storeIds.length; i++) {\n      console.log(`   ${dummyData.stores[i].name}: ${storeIds[i]}`);\n    }\n    \n  } catch (error) {\n    console.error('❌ Error:', error);\n  } finally {\n    client.release();\n    await pool.end();\n  }\n}\n\n// Jalankan jika dipanggil langsung\nif (import.meta.url === `file://${process.argv[1]}`) {\n  populateData();\n}\n\nexport { populateData };","size_bytes":7485},"server/auth-routes.ts":{"content":"import type { Express } from \"express\";\nimport { authStorage } from \"./auth\";\n\nexport function setupAuthRoutes(app: Express) {\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ \n          message: \"Email dan password harus diisi\" \n        });\n      }\n\n      const user = await authStorage.validateCredentials(email, password);\n      \n      if (!user) {\n        return res.status(401).json({ \n          message: \"Email atau password tidak valid\" \n        });\n      }\n\n      res.json({ \n        user,\n        message: \"Login berhasil\" \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ \n        message: \"Terjadi kesalahan pada server\" \n      });\n    }\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      // Simple check - in real app, verify JWT token\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader) {\n        return res.status(401).json({ \n          message: \"Token tidak ditemukan\" \n        });\n      }\n\n      // For demo, return user info\n      const mockUser = {\n        id: \"1\",\n        name: \"Admin User\",\n        email: \"admin@example.com\",\n        role: \"owner\"\n      };\n\n      res.json(mockUser);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ \n        message: \"Terjadi kesalahan pada server\" \n      });\n    }\n  });\n\n  // Create demo user endpoint (for development only)\n  app.post(\"/api/auth/setup-demo\", async (req, res) => {\n    try {\n      const adminEmail = \"admin@pos.com\";\n      const existingUser = await authStorage.getUserByEmail(adminEmail);\n      \n      if (existingUser) {\n        return res.json({ \n          message: \"Demo user sudah ada\" \n        });\n      }\n\n      const demoUser = await authStorage.createUser({\n        name: \"Admin POS\",\n        email: adminEmail,\n        password: \"admin123\",\n        role: \"owner\",\n        storeIds: [\"550e8400-e29b-41d4-a716-446655440001\"]\n      });\n\n      const { passwordHash, ...userWithoutPassword } = demoUser;\n      \n      res.json({ \n        user: userWithoutPassword,\n        message: \"Demo user berhasil dibuat\" \n      });\n    } catch (error) {\n      console.error(\"Setup demo user error:\", error);\n      res.status(500).json({ \n        message: \"Terjadi kesalahan pada server\" \n      });\n    }\n  });\n}","size_bytes":2514},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { users } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IAuthStorage {\n  getUserByEmail(email: string): Promise<any | undefined>;\n  createUser(userData: any): Promise<any>;\n  validateCredentials(email: string, password: string): Promise<any | null>;\n}\n\nexport class AuthStorage implements IAuthStorage {\n  async getUserByEmail(email: string) {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: any) {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        passwordHash: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async validateCredentials(email: string, password: string) {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n\n    const isValid = await bcrypt.compare(password, user.passwordHash);\n    if (!isValid) return null;\n\n    // Return user without password\n    const { passwordHash, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n}\n\nexport const authStorage = new AuthStorage();","size_bytes":1245},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: false\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":403},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuthRoutes } from \"./auth-routes\";\nimport {\n  insertStoreSchema,\n  insertProductSchema,\n  insertCustomerSchema,\n  insertTransactionSchema,\n  insertDebtSchema,\n  insertCashFlowEntrySchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuthRoutes(app);\n\n  // Stores\n  app.get(\"/api/stores\", async (req, res) => {\n    try {\n      const stores = await storage.getStores();\n      res.json(stores);\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data toko\" });\n    }\n  });\n\n  app.post(\"/api/stores\", async (req, res) => {\n    try {\n      const storeData = insertStoreSchema.parse(req.body);\n      const store = await storage.createStore(storeData);\n      res.status(201).json(store);\n    } catch (error) {\n      console.error(\"Error creating store:\", error);\n      res.status(400).json({ message: \"Data toko tidak valid\" });\n    }\n  });\n\n  app.get(\"/api/stores/:id\", async (req, res) => {\n    try {\n      const store = await storage.getStore(req.params.id);\n      if (!store) {\n        return res.status(404).json({ message: \"Toko tidak ditemukan\" });\n      }\n      res.json(store);\n    } catch (error) {\n      console.error(\"Error fetching store:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data toko\" });\n    }\n  });\n\n  // Dashboard\n  app.get(\"/api/stores/:id/dashboard\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats(req.params.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Gagal mengambil statistik dashboard\" });\n    }\n  });\n\n  // Products\n  app.get(\"/api/stores/:storeId/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts(req.params.storeId);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data produk\" });\n    }\n  });\n\n  app.post(\"/api/stores/:storeId/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse({\n        ...req.body,\n        storeId: req.params.storeId,\n      });\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Data produk tidak valid\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(400).json({ message: \"Gagal memperbarui produk\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Gagal menghapus produk\" });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/stores/:storeId/customers\", async (req, res) => {\n    try {\n      const customers = await storage.getCustomers(req.params.storeId);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data pelanggan\" });\n    }\n  });\n\n  app.post(\"/api/stores/:storeId/customers\", async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse({\n        ...req.body,\n        storeId: req.params.storeId,\n      });\n      const customer = await storage.createCustomer(customerData);\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(400).json({ message: \"Data pelanggan tidak valid\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(400).json({ message: \"Gagal memperbarui pelanggan\" });\n    }\n  });\n\n  // Transactions\n  app.get(\"/api/stores/:storeId/transactions\", async (req, res) => {\n    try {\n      const filters: any = {};\n      \n      if (req.query.from && req.query.to) {\n        filters.from = new Date(req.query.from as string);\n        filters.to = new Date(req.query.to as string);\n      }\n      \n      if (req.query.status) {\n        filters.status = req.query.status as string;\n      }\n\n      const transactions = await storage.getTransactions(req.params.storeId, filters);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data transaksi\" });\n    }\n  });\n\n  app.post(\"/api/stores/:storeId/transactions\", async (req, res) => {\n    try {\n      // Generate invoice number\n      const invoiceNumber = `TRX-${Date.now()}`;\n      \n      const transactionData = insertTransactionSchema.parse({\n        ...req.body,\n        storeId: req.params.storeId,\n        invoiceNumber,\n      });\n      \n      const transaction = await storage.createTransaction(transactionData);\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      res.status(400).json({ message: \"Data transaksi tidak valid\" });\n    }\n  });\n\n  app.put(\"/api/transactions/:id\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.partial().parse(req.body);\n      const transaction = await storage.updateTransaction(req.params.id, transactionData);\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error updating transaction:\", error);\n      res.status(400).json({ message: \"Gagal memperbarui transaksi\" });\n    }\n  });\n\n  // Debts\n  app.get(\"/api/stores/:storeId/debts\", async (req, res) => {\n    try {\n      const debts = await storage.getDebts(req.params.storeId);\n      res.json(debts);\n    } catch (error) {\n      console.error(\"Error fetching debts:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data piutang\" });\n    }\n  });\n\n  app.put(\"/api/debts/:id\", async (req, res) => {\n    try {\n      const debtData = insertDebtSchema.partial().parse(req.body);\n      const debt = await storage.updateDebt(req.params.id, debtData);\n      res.json(debt);\n    } catch (error) {\n      console.error(\"Error updating debt:\", error);\n      res.status(400).json({ message: \"Gagal memperbarui piutang\" });\n    }\n  });\n\n  // Mock WhatsApp reminder\n  app.post(\"/api/debts/:id/reminder\", async (req, res) => {\n    try {\n      const debt = await storage.getDebt(req.params.id);\n      if (!debt) {\n        return res.status(404).json({ message: \"Piutang tidak ditemukan\" });\n      }\n\n      // Mock WhatsApp sending - in production this would call WhatsApp Business API\n      console.log(`Mock WhatsApp reminder sent for debt ${debt.id}`);\n      \n      await storage.updateDebt(req.params.id, {\n        reminderSent: true,\n        lastReminderDate: new Date(),\n      });\n\n      res.json({ message: \"Reminder berhasil dikirim\", success: true });\n    } catch (error) {\n      console.error(\"Error sending reminder:\", error);\n      res.status(500).json({ message: \"Gagal mengirim reminder\" });\n    }\n  });\n\n  // Cash flow entries\n  app.get(\"/api/stores/:storeId/cashflow\", async (req, res) => {\n    try {\n      const { from, to, type } = req.query;\n      const filters: any = {};\n      \n      if (from) filters.from = new Date(from as string);\n      if (to) filters.to = new Date(to as string);\n      if (type) filters.type = type as string;\n      \n      const entries = await storage.getCashFlowEntries(req.params.storeId, filters);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching cash flow entries:\", error);\n      res.status(500).json({ message: \"Gagal mengambil data arus kas\" });\n    }\n  });\n\n  app.post(\"/api/stores/:storeId/cashflow\", async (req, res) => {\n    try {\n      const entryData = insertCashFlowEntrySchema.parse({\n        ...req.body,\n        storeId: req.params.storeId,\n      });\n      const entry = await storage.createCashFlowEntry(entryData);\n      res.status(201).json(entry);\n    } catch (error) {\n      console.error(\"Error creating cash flow entry:\", error);\n      res.status(400).json({ message: \"Data arus kas tidak valid\" });\n    }\n  });\n\n  app.put(\"/api/cashflow/:id\", async (req, res) => {\n    try {\n      const entryData = insertCashFlowEntrySchema.partial().parse(req.body);\n      const entry = await storage.updateCashFlowEntry(req.params.id, entryData);\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error updating cash flow entry:\", error);\n      res.status(400).json({ message: \"Data arus kas tidak valid\" });\n    }\n  });\n\n  app.delete(\"/api/cashflow/:id\", async (req, res) => {\n    try {\n      await storage.deleteCashFlowEntry(req.params.id);\n      res.json({ message: \"Entry arus kas berhasil dihapus\" });\n    } catch (error) {\n      console.error(\"Error deleting cash flow entry:\", error);\n      res.status(500).json({ message: \"Gagal menghapus entry arus kas\" });\n    }\n  });\n\n  // Reports\n  app.get(\"/api/stores/:storeId/reports/sales\", async (req, res) => {\n    try {\n      const from = new Date(req.query.from as string);\n      const to = new Date(req.query.to as string);\n      \n      if (isNaN(from.getTime()) || isNaN(to.getTime())) {\n        return res.status(400).json({ message: \"Tanggal tidak valid\" });\n      }\n\n      const report = await storage.getSalesReport(req.params.storeId, from, to);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating sales report:\", error);\n      res.status(500).json({ message: \"Gagal membuat laporan penjualan\" });\n    }\n  });\n\n  // Mock payment callback\n  app.post(\"/api/payment/callback\", async (req, res) => {\n    try {\n      const { transactionId, status } = req.body;\n      \n      if (status === \"paid\") {\n        await storage.updateTransaction(transactionId, {\n          paymentStatus: \"paid\",\n        });\n        \n        console.log(`Mock payment callback: Transaction ${transactionId} marked as paid`);\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error processing payment callback:\", error);\n      res.status(500).json({ message: \"Gagal memproses callback pembayaran\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11060},"server/storage.ts":{"content":"import {\n  stores,\n  products,\n  customers,\n  transactions,\n  debts,\n  stockMovements,\n  cashFlowEntries,\n  auditLogs,\n  type Store,\n  type InsertStore,\n  type Product,\n  type InsertProduct,\n  type Customer,\n  type InsertCustomer,\n  type Transaction,\n  type InsertTransaction,\n  type Debt,\n  type InsertDebt,\n  type StockMovement,\n  type InsertStockMovement,\n  type CashFlowEntry,\n  type InsertCashFlowEntry,\n  type AuditLog,\n  type InsertAuditLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, gte, lte, sum, count, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Stores\n  getStores(): Promise<Store[]>;\n  getStore(id: string): Promise<Store | undefined>;\n  createStore(store: InsertStore): Promise<Store>;\n  updateStore(id: string, store: Partial<InsertStore>): Promise<Store>;\n\n  // Products\n  getProducts(storeId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  getLowStockProducts(storeId: string, threshold?: number): Promise<Product[]>;\n\n  // Customers\n  getCustomers(storeId: string): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n\n  // Transactions\n  getTransactions(storeId: string, filters?: { from?: Date; to?: Date; status?: string }): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, transaction: Partial<InsertTransaction>): Promise<Transaction>;\n\n  // Debts\n  getDebts(storeId: string): Promise<Debt[]>;\n  getDebt(id: string): Promise<Debt | undefined>;\n  createDebt(debt: InsertDebt): Promise<Debt>;\n  updateDebt(id: string, debt: Partial<InsertDebt>): Promise<Debt>;\n  getCustomerDebts(customerId: string): Promise<Debt[]>;\n\n  // Stock movements\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n  getStockMovements(productId: string): Promise<StockMovement[]>;\n\n  // Cash flow entries\n  getCashFlowEntries(storeId: string, filters?: { from?: Date; to?: Date; type?: string }): Promise<CashFlowEntry[]>;\n  createCashFlowEntry(entry: InsertCashFlowEntry): Promise<CashFlowEntry>;\n  updateCashFlowEntry(id: string, entry: Partial<InsertCashFlowEntry>): Promise<CashFlowEntry>;\n  deleteCashFlowEntry(id: string): Promise<void>;\n\n  // Dashboard stats\n  getDashboardStats(storeId: string): Promise<{\n    dailySales: number;\n    transactionCount: number;\n    totalDebt: number;\n    lowStockCount: number;\n    recentTransactions: Transaction[];\n  }>;\n\n  // Reports\n  getSalesReport(storeId: string, from: Date, to: Date): Promise<{\n    totalRevenue: number;\n    totalTransactions: number;\n    grossProfit: number;\n    averageTransaction: number;\n    topProducts: Array<{\n      productName: string;\n      quantity: number;\n      revenue: number;\n    }>;\n    paymentMethods: Array<{\n      method: string;\n      amount: number;\n      count: number;\n    }>;\n  }>;\n\n  // Audit logs\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getStores(): Promise<Store[]> {\n    return await db.select().from(stores).orderBy(stores.name);\n  }\n\n  async getStore(id: string): Promise<Store | undefined> {\n    const [store] = await db.select().from(stores).where(eq(stores.id, id));\n    return store;\n  }\n\n  async createStore(store: InsertStore): Promise<Store> {\n    const [created] = await db.insert(stores).values(store).returning();\n    return created;\n  }\n\n  async updateStore(id: string, store: Partial<InsertStore>): Promise<Store> {\n    const [updated] = await db\n      .update(stores)\n      .set({ ...store, updatedAt: new Date() })\n      .where(eq(stores.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getProducts(storeId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.storeId, storeId), eq(products.isActive, true)))\n      .orderBy(products.name);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [created] = await db.insert(products).values(product).returning();\n    return created;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updated] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  async getLowStockProducts(storeId: string, threshold = 5): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.storeId, storeId),\n          eq(products.isActive, true),\n          sql`${products.stock} <= ${threshold}`\n        )\n      )\n      .orderBy(products.stock);\n  }\n\n  async getCustomers(storeId: string): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(eq(customers.storeId, storeId))\n      .orderBy(customers.name);\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [created] = await db.insert(customers).values(customer).returning();\n    return created;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer> {\n    const [updated] = await db\n      .update(customers)\n      .set({ ...customer, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  async getTransactions(\n    storeId: string,\n    filters?: { from?: Date; to?: Date; status?: string }\n  ): Promise<Transaction[]> {\n    let whereConditions = [eq(transactions.storeId, storeId)];\n    \n    if (filters?.from && filters?.to) {\n      whereConditions.push(gte(transactions.createdAt, filters.from));\n      whereConditions.push(lte(transactions.createdAt, filters.to));\n    }\n\n    if (filters?.status) {\n      whereConditions.push(eq(transactions.paymentStatus, filters.status));\n    }\n\n    return await db\n      .select()\n      .from(transactions)\n      .where(and(...whereConditions))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    return transaction;\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    return await db.transaction(async (tx) => {\n      // Create transaction\n      const [created] = await tx.insert(transactions).values({\n        ...transaction,\n        items: transaction.items as Array<{\n          productId: string;\n          productName: string;\n          quantity: number;\n          price: number;\n          discount: number;\n        }>\n      }).returning();\n\n      // Update product stock\n      for (const item of transaction.items) {\n        await tx\n          .update(products)\n          .set({\n            stock: sql`${products.stock} - ${item.quantity}`,\n            updatedAt: new Date(),\n          })\n          .where(eq(products.id, item.productId));\n\n        // Create stock movement\n        await tx.insert(stockMovements).values({\n          productId: item.productId,\n          storeId: transaction.storeId,\n          type: \"out\",\n          quantity: -item.quantity,\n          reference: created.id,\n          notes: \"Sale transaction\",\n        });\n      }\n\n      // Create debt if unpaid\n      if (\n        created.paymentStatus === \"unpaid\" &&\n        created.customerId &&\n        parseFloat(created.total) > 0\n      ) {\n        await tx.insert(debts).values({\n          transactionId: created.id,\n          storeId: created.storeId,\n          customerId: created.customerId,\n          amount: created.total,\n          status: \"pending\",\n        });\n      }\n\n      return created;\n    });\n  }\n\n  async updateTransaction(id: string, transaction: Partial<InsertTransaction>): Promise<Transaction> {\n    const updateData: any = { ...transaction, updatedAt: new Date() };\n    if (transaction.items) {\n      updateData.items = transaction.items;\n    }\n    \n    const [updated] = await db\n      .update(transactions)\n      .set(updateData)\n      .where(eq(transactions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getDebts(storeId: string): Promise<Debt[]> {\n    return await db\n      .select()\n      .from(debts)\n      .where(eq(debts.storeId, storeId))\n      .orderBy(desc(debts.createdAt));\n  }\n\n  async getDebt(id: string): Promise<Debt | undefined> {\n    const [debt] = await db.select().from(debts).where(eq(debts.id, id));\n    return debt;\n  }\n\n  async createDebt(debt: InsertDebt): Promise<Debt> {\n    const [created] = await db.insert(debts).values(debt).returning();\n    return created;\n  }\n\n  async updateDebt(id: string, debt: Partial<InsertDebt>): Promise<Debt> {\n    const [updated] = await db\n      .update(debts)\n      .set({ ...debt, updatedAt: new Date() })\n      .where(eq(debts.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getCustomerDebts(customerId: string): Promise<Debt[]> {\n    return await db\n      .select()\n      .from(debts)\n      .where(eq(debts.customerId, customerId))\n      .orderBy(desc(debts.createdAt));\n  }\n\n  async createStockMovement(movement: InsertStockMovement): Promise<StockMovement> {\n    const [created] = await db.insert(stockMovements).values(movement).returning();\n    return created;\n  }\n\n  async getStockMovements(productId: string): Promise<StockMovement[]> {\n    return await db\n      .select()\n      .from(stockMovements)\n      .where(eq(stockMovements.productId, productId))\n      .orderBy(desc(stockMovements.createdAt));\n  }\n\n  async getCashFlowEntries(storeId: string, filters?: { from?: Date; to?: Date; type?: string }): Promise<CashFlowEntry[]> {\n    let whereConditions = [eq(cashFlowEntries.storeId, storeId)];\n\n    if (filters?.from && filters?.to) {\n      whereConditions.push(gte(cashFlowEntries.createdAt, filters.from));\n      whereConditions.push(lte(cashFlowEntries.createdAt, filters.to));\n    }\n\n    if (filters?.type) {\n      whereConditions.push(eq(cashFlowEntries.type, filters.type));\n    }\n\n    return await db\n      .select()\n      .from(cashFlowEntries)\n      .where(and(...whereConditions))\n      .orderBy(desc(cashFlowEntries.createdAt));\n  }\n\n  async createCashFlowEntry(entry: InsertCashFlowEntry): Promise<CashFlowEntry> {\n    const [created] = await db.insert(cashFlowEntries).values(entry).returning();\n    return created;\n  }\n\n  async updateCashFlowEntry(id: string, entry: Partial<InsertCashFlowEntry>): Promise<CashFlowEntry> {\n    const [updated] = await db\n      .update(cashFlowEntries)\n      .set({ ...entry, updatedAt: new Date() })\n      .where(eq(cashFlowEntries.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCashFlowEntry(id: string): Promise<void> {\n    await db.delete(cashFlowEntries).where(eq(cashFlowEntries.id, id));\n  }\n\n  async getDashboardStats(storeId: string) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    // Daily sales\n    const [dailySalesResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.storeId, storeId),\n          eq(transactions.paymentStatus, \"paid\"),\n          gte(transactions.createdAt, today),\n          lte(transactions.createdAt, tomorrow)\n        )\n      );\n\n    // Transaction count\n    const [transactionCountResult] = await db\n      .select({ count: count() })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.storeId, storeId),\n          gte(transactions.createdAt, today),\n          lte(transactions.createdAt, tomorrow)\n        )\n      );\n\n    // Total debt\n    const [totalDebtResult] = await db\n      .select({ total: sum(sql`${debts.amount} - ${debts.paidAmount}`) })\n      .from(debts)\n      .where(and(eq(debts.storeId, storeId), eq(debts.status, \"pending\")));\n\n    // Low stock count\n    const lowStockProducts = await this.getLowStockProducts(storeId);\n\n    // Recent transactions\n    const recentTransactions = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.storeId, storeId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(5);\n\n    return {\n      dailySales: parseFloat(dailySalesResult?.total || \"0\"),\n      transactionCount: transactionCountResult?.count || 0,\n      totalDebt: parseFloat(totalDebtResult?.total || \"0\"),\n      lowStockCount: lowStockProducts.length,\n      recentTransactions,\n    };\n  }\n\n  async getSalesReport(storeId: string, from: Date, to: Date) {\n    // Total revenue\n    const [revenueResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.storeId, storeId),\n          eq(transactions.paymentStatus, \"paid\"),\n          gte(transactions.createdAt, from),\n          lte(transactions.createdAt, to)\n        )\n      );\n\n    // Total transactions\n    const [transactionCountResult] = await db\n      .select({ count: count() })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.storeId, storeId),\n          gte(transactions.createdAt, from),\n          lte(transactions.createdAt, to)\n        )\n      );\n\n    const totalRevenue = parseFloat(revenueResult?.total || \"0\");\n    const totalTransactions = transactionCountResult?.count || 0;\n\n    return {\n      totalRevenue,\n      totalTransactions,\n      grossProfit: totalRevenue * 0.27, // Estimated margin\n      averageTransaction: totalTransactions > 0 ? totalRevenue / totalTransactions : 0,\n      topProducts: [], // Would need complex aggregation\n      paymentMethods: [], // Would need complex aggregation\n    };\n  }\n\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [created] = await db.insert(auditLogs).values(log).returning();\n    return created;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14987},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"node:url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        path.dirname(fileURLToPath(import.meta.url)),\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(path.dirname(fileURLToPath(import.meta.url)), \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2355},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  varchar, \n  text, \n  integer, \n  decimal, \n  timestamp, \n  boolean,\n  json,\n  uuid,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Stores table\nexport const stores = pgTable(\"stores\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\", { length: 50 }),\n  timezone: varchar(\"timezone\", { length: 50 }).default(\"Asia/Jakarta\"),\n  currency: varchar(\"currency\", { length: 10 }).default(\"IDR\"),\n  lowStockThreshold: integer(\"low_stock_threshold\").default(5),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Users table (simple auth)\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 50 }),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"cashier\"), // owner, admin, cashier\n  passwordHash: text(\"password_hash\").notNull(),\n  storeIds: json(\"store_ids\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  sku: varchar(\"sku\", { length: 100 }).notNull(),\n  priceBuy: decimal(\"price_buy\", { precision: 12, scale: 2 }).notNull(),\n  priceSell: decimal(\"price_sell\", { precision: 12, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  unit: varchar(\"unit\", { length: 50 }).default(\"pcs\"),\n  category: varchar(\"category\", { length: 100 }),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  phone: varchar(\"phone\", { length: 50 }),\n  email: varchar(\"email\", { length: 255 }),\n  address: text(\"address\"),\n  balance: decimal(\"balance\", { precision: 12, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  customerId: uuid(\"customer_id\").references(() => customers.id),\n  invoiceNumber: varchar(\"invoice_number\", { length: 100 }).notNull(),\n  items: json(\"items\").$type<Array<{\n    productId: string;\n    productName: string;\n    quantity: number;\n    price: number;\n    discount: number;\n  }>>().notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 12, scale: 2 }).default(\"0\"),\n  tax: decimal(\"tax\", { precision: 12, scale: 2 }).default(\"0\"),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  paymentStatus: varchar(\"payment_status\", { length: 20 }).notNull().default(\"unpaid\"), // paid, unpaid, partial\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, transfer, qris, ewallet\n  notes: text(\"notes\"),\n  offlineId: varchar(\"offline_id\", { length: 100 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Debts table (piutang)\nexport const debts = pgTable(\"debts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: uuid(\"transaction_id\").notNull().references(() => transactions.id, { onDelete: \"cascade\" }),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 12, scale: 2 }).default(\"0\"),\n  dueDate: timestamp(\"due_date\"),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, paid, overdue\n  reminderSent: boolean(\"reminder_sent\").default(false),\n  lastReminderDate: timestamp(\"last_reminder_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Stock movements table\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: uuid(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\", { length: 20 }).notNull(), // in, out, adjustment\n  quantity: integer(\"quantity\").notNull(),\n  reference: varchar(\"reference\", { length: 255 }), // transaction_id, adjustment reason, etc\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cash flow entries table (for expense and income tracking)\nexport const cashFlowEntries = pgTable(\"cash_flow_entries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  customerId: uuid(\"customer_id\").references(() => customers.id, { onDelete: \"set null\" }), // for debt payments\n  type: varchar(\"type\", { length: 20 }).notNull(), // income, expense\n  category: varchar(\"category\", { length: 100 }).notNull(), // sales, purchase, operational, debt, etc\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, transfer, qris, ewallet\n  reference: varchar(\"reference\", { length: 255 }), // transaction_id, invoice number, etc\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Debt payments table (for installments)\nexport const debtPayments = pgTable(\"debt_payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  debtId: uuid(\"debt_id\").notNull().references(() => debts.id, { onDelete: \"cascade\" }),\n  storeId: uuid(\"store_id\").notNull().references(() => stores.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, transfer, qris, ewallet\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  storeId: uuid(\"store_id\").references(() => stores.id),\n  action: varchar(\"action\", { length: 100 }).notNull(),\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(),\n  entityId: uuid(\"entity_id\"),\n  payload: json(\"payload\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const storesRelations = relations(stores, ({ many }) => ({\n  products: many(products),\n  customers: many(customers),\n  transactions: many(transactions),\n  debts: many(debts),\n  stockMovements: many(stockMovements),\n  cashFlowEntries: many(cashFlowEntries),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  store: one(stores, {\n    fields: [products.storeId],\n    references: [stores.id],\n  }),\n  stockMovements: many(stockMovements),\n}));\n\nexport const customersRelations = relations(customers, ({ one, many }) => ({\n  store: one(stores, {\n    fields: [customers.storeId],\n    references: [stores.id],\n  }),\n  transactions: many(transactions),\n  debts: many(debts),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one, many }) => ({\n  store: one(stores, {\n    fields: [transactions.storeId],\n    references: [stores.id],\n  }),\n  customer: one(customers, {\n    fields: [transactions.customerId],\n    references: [customers.id],\n  }),\n  debts: many(debts),\n}));\n\nexport const debtsRelations = relations(debts, ({ one, many }) => ({\n  transaction: one(transactions, {\n    fields: [debts.transactionId],\n    references: [transactions.id],\n  }),\n  store: one(stores, {\n    fields: [debts.storeId],\n    references: [stores.id],\n  }),\n  customer: one(customers, {\n    fields: [debts.customerId],\n    references: [customers.id],\n  }),\n  payments: many(debtPayments),\n}));\n\nexport const debtPaymentsRelations = relations(debtPayments, ({ one }) => ({\n  debt: one(debts, {\n    fields: [debtPayments.debtId],\n    references: [debts.id],\n  }),\n  store: one(stores, {\n    fields: [debtPayments.storeId],\n    references: [stores.id],\n  }),\n}));\n\nexport const stockMovementsRelations = relations(stockMovements, ({ one }) => ({\n  product: one(products, {\n    fields: [stockMovements.productId],\n    references: [products.id],\n  }),\n  store: one(stores, {\n    fields: [stockMovements.storeId],\n    references: [stores.id],\n  }),\n}));\n\nexport const cashFlowEntriesRelations = relations(cashFlowEntries, ({ one }) => ({\n  store: one(stores, {\n    fields: [cashFlowEntries.storeId],\n    references: [stores.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertStoreSchema = createInsertSchema(stores).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDebtSchema = createInsertSchema(debts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCashFlowEntrySchema = createInsertSchema(cashFlowEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDebtPaymentSchema = createInsertSchema(debtPayments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Store = typeof stores.$inferSelect;\nexport type InsertStore = z.infer<typeof insertStoreSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Debt = typeof debts.$inferSelect;\nexport type InsertDebt = z.infer<typeof insertDebtSchema>;\nexport type DebtPayment = typeof debtPayments.$inferSelect;\nexport type InsertDebtPayment = z.infer<typeof insertDebtPaymentSchema>;\nexport type StockMovement = typeof stockMovements.$inferSelect;\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\nexport type CashFlowEntry = typeof cashFlowEntries.$inferSelect;\nexport type InsertCashFlowEntry = z.infer<typeof insertCashFlowEntrySchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\n// Dashboard stats type\nexport type DashboardStats = {\n  dailySales: number;\n  transactionCount: number;\n  totalDebt: number;\n  lowStockCount: number;\n  recentTransactions: Transaction[];\n};\n","size_bytes":12465},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport POS from \"@/pages/pos\";\nimport Products from \"@/pages/products\";\nimport Customers from \"@/pages/customers\";\nimport Reports from \"@/pages/reports\";\nimport CashFlow from \"@/pages/cashflow\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <h2 className=\"text-xl font-semibold mb-2\">BukuWarung</h2>\n            <p className=\"text-muted-foreground\">Memeriksa autentikasi...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/pos\" component={POS} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/customers\" component={Customers} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/cashflow\" component={CashFlow} />\n      <Route path=\"/login\" component={Login} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"mobile-container\">\n          {/* Offline Indicator */}\n          {!isOnline && (\n            <div className=\"fixed top-0 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-warning text-warning-foreground px-4 py-2 text-center text-sm font-medium z-50\">\n              <i className=\"fas fa-wifi-slash mr-2\"></i>\n              Mode Offline - Data akan disinkronkan saat online\n            </div>\n          )}\n          \n          <Router />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2996},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210 40% 98%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 47.4% 11.2%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 47.4% 11.2%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --success: hsl(120 61% 34%);\n  --success-foreground: hsl(120 100% 97%);\n  --warning: hsl(35 100% 48%);\n  --warning-foreground: hsl(35 100% 5%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(210 83% 53%);\n  --chart-1: hsl(210 83% 53%);\n  --chart-2: hsl(120 61% 34%);\n  --chart-3: hsl(35 100% 48%);\n  --chart-4: hsl(0 84.2% 60.2%);\n  --chart-5: hsl(261.4 83.3% 57.8%);\n  --sidebar: hsl(210 40% 98%);\n  --sidebar-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 47.4% 11.2%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(210 83% 53%);\n  --font-sans: 'Roboto', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --success: hsl(120 61% 34%);\n  --success-foreground: hsl(120 100% 97%);\n  --warning: hsl(35 100% 48%);\n  --warning-foreground: hsl(35 100% 5%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(212.7 26.8% 83.9%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .mobile-container {\n    @apply max-w-sm mx-auto bg-white dark:bg-card shadow-2xl min-h-screen relative;\n  }\n\n  .success {\n    background-color: hsl(var(--success));\n    color: hsl(var(--success-foreground));\n  }\n\n  .warning {\n    background-color: hsl(var(--warning));\n    color: hsl(var(--warning-foreground));\n  }\n\n  .animate-spin {\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n}\n","size_bytes":3237},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-offline.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { offlineQueue } from '@/lib/offline-queue';\n\nexport function useOffline() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = async () => {\n      setIsOnline(true);\n      setIsSyncing(true);\n      \n      try {\n        await offlineQueue.processQueue();\n      } catch (error) {\n        console.error('Sync failed:', error);\n      } finally {\n        setIsSyncing(false);\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check if there are pending items when component mounts\n    if (isOnline && offlineQueue.hasPendingItems()) {\n      handleOnline();\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return {\n    isOnline,\n    isSyncing,\n    queueTransaction: offlineQueue.addTransaction.bind(offlineQueue),\n    getPendingCount: offlineQueue.getPendingCount.bind(offlineQueue),\n  };\n}\n","size_bytes":1214},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useAuth() {\n  const [user, setUser] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Try to get user from localStorage first\n  useEffect(() => {\n    const savedUser = localStorage.getItem(\"user\");\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        localStorage.removeItem(\"user\");\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    setUser(null);\n    window.location.href = \"/login\";\n  };\n\n  const isAuthenticated = !!user;\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    logout,\n    setUser, // Expose setUser for manual updates\n  };\n}","size_bytes":763},"client/src/hooks/useStore.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"./useAuth\";\n\nexport function useStore() {\n  const { user } = useAuth();\n  const [activeStoreId, setActiveStoreId] = useState<string | null>(null);\n\n  // Fetch stores yang bisa diakses user\n  const { data: allStores, isLoading: isLoadingStores } = useQuery({\n    queryKey: [\"/api/stores\"],\n    enabled: !!user,\n  });\n  \n  // Filter stores berdasarkan storeIds yang dimiliki user\n  const stores = allStores?.filter((store: any) => user?.storeIds?.includes(store.id)) || [];\n\n  // Set active store dari localStorage atau default ke store pertama\n  useEffect(() => {\n    if (user?.storeIds) {\n      const savedStoreId = localStorage.getItem(\"activeStoreId\");\n      if (savedStoreId && user.storeIds.includes(savedStoreId)) {\n        setActiveStoreId(savedStoreId);\n      } else if (user.storeIds.length > 0) {\n        setActiveStoreId(user.storeIds[0]);\n        localStorage.setItem(\"activeStoreId\", user.storeIds[0]);\n      }\n    }\n  }, [user]);\n\n  const switchStore = (storeId: string) => {\n    setActiveStoreId(storeId);\n    localStorage.setItem(\"activeStoreId\", storeId);\n  };\n\n  const activeStore = stores?.find((store: any) => store.id === activeStoreId);\n\n  return {\n    activeStoreId,\n    activeStore,\n    stores,\n    isLoadingStores,\n    switchStore,\n  };\n}","size_bytes":1382},"client/src/lib/currency.ts":{"content":"/**\n * Format number as Indonesian Rupiah currency\n * @param amount - The amount to format\n * @returns Formatted currency string\n */\nexport function formatCurrency(amount: number): string {\n  if (isNaN(amount)) {\n    return 'Rp 0';\n  }\n\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n}\n\n/**\n * Parse currency string to number\n * @param currencyString - The currency string to parse\n * @returns Parsed number\n */\nexport function parseCurrency(currencyString: string): number {\n  if (!currencyString) return 0;\n  \n  // Remove currency symbol and formatting\n  const numberString = currencyString\n    .replace(/Rp\\s?/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n    \n  return parseFloat(numberString) || 0;\n}\n\n/**\n * Format number as compact currency (e.g., 1.2M, 500K)\n * @param amount - The amount to format\n * @returns Compact formatted currency string\n */\nexport function formatCompactCurrency(amount: number): string {\n  if (isNaN(amount)) {\n    return 'Rp 0';\n  }\n\n  if (amount >= 1000000000) {\n    return `Rp ${(amount / 1000000000).toFixed(1)}M`;\n  } else if (amount >= 1000000) {\n    return `Rp ${(amount / 1000000).toFixed(1)}M`;\n  } else if (amount >= 1000) {\n    return `Rp ${(amount / 1000).toFixed(0)}K`;\n  } else {\n    return formatCurrency(amount);\n  }\n}\n\n/**\n * Validate if string is a valid currency format\n * @param value - The value to validate\n * @returns True if valid currency format\n */\nexport function isValidCurrency(value: string): boolean {\n  const numberValue = parseCurrency(value);\n  return !isNaN(numberValue) && numberValue >= 0;\n}\n","size_bytes":1692},"client/src/lib/offline-queue.ts":{"content":"interface QueuedTransaction {\n  id: string;\n  data: any;\n  timestamp: number;\n  retryCount: number;\n}\n\nclass OfflineQueue {\n  private queue: QueuedTransaction[] = [];\n  private readonly STORAGE_KEY = 'pos_offline_queue';\n  private readonly MAX_RETRIES = 3;\n\n  constructor() {\n    this.loadFromStorage();\n  }\n\n  private loadFromStorage() {\n    try {\n      const saved = localStorage.getItem(this.STORAGE_KEY);\n      if (saved) {\n        this.queue = JSON.parse(saved);\n      }\n    } catch (error) {\n      console.error('Failed to load offline queue:', error);\n      this.queue = [];\n    }\n  }\n\n  private saveToStorage() {\n    try {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.queue));\n    } catch (error) {\n      console.error('Failed to save offline queue:', error);\n    }\n  }\n\n  addTransaction(transactionData: any): string {\n    const id = `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const queuedItem: QueuedTransaction = {\n      id,\n      data: {\n        ...transactionData,\n        offlineId: id,\n      },\n      timestamp: Date.now(),\n      retryCount: 0,\n    };\n\n    this.queue.push(queuedItem);\n    this.saveToStorage();\n    \n    return id;\n  }\n\n  async processQueue(): Promise<void> {\n    if (this.queue.length === 0) return;\n\n    const itemsToProcess = [...this.queue];\n    \n    for (const item of itemsToProcess) {\n      try {\n        await this.syncTransaction(item);\n        this.removeFromQueue(item.id);\n      } catch (error) {\n        console.error(`Failed to sync transaction ${item.id}:`, error);\n        this.incrementRetryCount(item.id);\n      }\n    }\n\n    this.saveToStorage();\n  }\n\n  private async syncTransaction(item: QueuedTransaction): Promise<void> {\n    const response = await fetch('/api/stores/1/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(item.data),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n  }\n\n  private removeFromQueue(id: string) {\n    this.queue = this.queue.filter(item => item.id !== id);\n  }\n\n  private incrementRetryCount(id: string) {\n    const item = this.queue.find(item => item.id === id);\n    if (item) {\n      item.retryCount++;\n      if (item.retryCount >= this.MAX_RETRIES) {\n        console.warn(`Transaction ${id} exceeded max retries, removing from queue`);\n        this.removeFromQueue(id);\n      }\n    }\n  }\n\n  hasPendingItems(): boolean {\n    return this.queue.length > 0;\n  }\n\n  getPendingCount(): number {\n    return this.queue.length;\n  }\n\n  clearQueue(): void {\n    this.queue = [];\n    this.saveToStorage();\n  }\n\n  getQueueItems(): QueuedTransaction[] {\n    return [...this.queue];\n  }\n}\n\nexport const offlineQueue = new OfflineQueue();\n","size_bytes":2813},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/cashflow.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { format } from \"date-fns\";\nimport { id } from \"date-fns/locale\";\nimport { CreditCard, User } from \"lucide-react\";\n\nexport default function CashFlow() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [filterType, setFilterType] = useState(\"all\");\n  const [entryData, setEntryData] = useState({\n    type: \"expense\",\n    category: \"\",\n    description: \"\",\n    amount: \"\",\n    paymentMethod: \"cash\",\n    customerId: \"\",\n    createdAt: new Date().toISOString().split('T')[0], // Add date field\n  });\n  \n  const [editingEntry, setEditingEntry] = useState<any>(null);\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: entries, isLoading } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/cashflow\", filterType],\n    queryFn: () => {\n      const params = filterType !== \"all\" ? `?type=${filterType}` : \"\";\n      return fetch(`/api/stores/550e8400-e29b-41d4-a716-446655440001/cashflow${params}`)\n        .then(res => res.json());\n    },\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/customers\"],\n  });\n\n  const createEntryMutation = useMutation({\n    mutationFn: async (entry: any) => {\n      return await apiRequest(\"POST\", \"/api/stores/550e8400-e29b-41d4-a716-446655440001/cashflow\", entry);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Entry arus kas berhasil ditambahkan\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/cashflow\"] \n      });\n      setEntryData({\n        type: \"expense\",\n        category: \"\",\n        description: \"\",\n        amount: \"\",\n        paymentMethod: \"cash\",\n        customerId: \"\",\n      });\n      setShowAddForm(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menambahkan entry arus kas\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!entryData.category || !entryData.description || !entryData.amount) {\n      toast({\n        title: \"Error\",\n        description: \"Semua field harus diisi\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (entryData.category === \"debt\" && !entryData.customerId) {\n      toast({\n        title: \"Error\",\n        description: \"Pilih pelanggan untuk pembayaran piutang\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createEntryMutation.mutate({\n      ...entryData,\n      amount: parseFloat(entryData.amount).toFixed(2),\n      customerId: entryData.category === \"debt\" ? entryData.customerId : null,\n    });\n  };\n\n  const incomeEntries = entries?.filter((entry: any) => entry.type === \"income\") || [];\n  const expenseEntries = entries?.filter((entry: any) => entry.type === \"expense\") || [];\n  \n  const totalIncome = incomeEntries.reduce((sum: number, entry: any) => \n    sum + parseFloat(entry.amount), 0);\n  const totalExpense = expenseEntries.reduce((sum: number, entry: any) => \n    sum + parseFloat(entry.amount), 0);\n  const netCashFlow = totalIncome - totalExpense;\n\n  const getCategoryIcon = (category: string) => {\n    const iconMap: Record<string, string> = {\n      sales: \"fas fa-store\",\n      purchase: \"fas fa-shopping-cart\",\n      operational: \"fas fa-cogs\",\n      marketing: \"fas fa-bullhorn\",\n      salary: \"fas fa-users\",\n      rent: \"fas fa-building\",\n      utilities: \"fas fa-bolt\",\n      loan: \"fas fa-money-bill\",\n      debt: \"fas fa-credit-card\",\n      other: \"fas fa-list\",\n    };\n    return iconMap[category] || \"fas fa-list\";\n  };\n\n  const getPaymentMethodIcon = (method: string) => {\n    const iconMap: Record<string, string> = {\n      cash: \"fas fa-money-bill\",\n      transfer: \"fas fa-university\",\n      qris: \"fas fa-qrcode\",\n      ewallet: \"fas fa-mobile-alt\",\n    };\n    return iconMap[method] || \"fas fa-money-bill\";\n  };\n\n  return (\n    <MobileLayout title=\"Arus Kas\" showBackButton>\n      {/* Summary Cards */}\n      <div className=\"p-4 space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-arrow-up text-success\"></i>\n              <div>\n                <p className=\"text-sm text-success\">Pemasukan</p>\n                <p className=\"text-lg font-bold text-success\" data-testid=\"text-total-income\">\n                  {formatCurrency(totalIncome)}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-arrow-down text-destructive\"></i>\n              <div>\n                <p className=\"text-sm text-destructive\">Pengeluaran</p>\n                <p className=\"text-lg font-bold text-destructive\" data-testid=\"text-total-expense\">\n                  {formatCurrency(totalExpense)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className={`rounded-lg p-4 ${netCashFlow >= 0 ? 'bg-success/10 border-success/20' : 'bg-destructive/10 border-destructive/20'} border`}>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm\">Arus Kas Bersih</p>\n              <p className={`text-xl font-bold ${netCashFlow >= 0 ? 'text-success' : 'text-destructive'}`} data-testid=\"text-net-cashflow\">\n                {formatCurrency(netCashFlow)}\n              </p>\n            </div>\n            <i className={`fas ${netCashFlow >= 0 ? 'fa-trending-up text-success' : 'fa-trending-down text-destructive'} text-2xl`}></i>\n          </div>\n        </div>\n      </div>\n\n      {/* Filter and Add Button */}\n      <div className=\"p-4 flex items-center justify-between\">\n        <Select value={filterType} onValueChange={setFilterType}>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-filter-type\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Semua</SelectItem>\n            <SelectItem value=\"income\">Pemasukan</SelectItem>\n            <SelectItem value=\"expense\">Pengeluaran</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Button \n          onClick={() => setShowAddForm(!showAddForm)}\n          data-testid=\"button-toggle-add-form\"\n        >\n          <i className=\"fas fa-plus mr-2\"></i>\n          Tambah Entry\n        </Button>\n      </div>\n\n      {/* Add Entry Form */}\n      {showAddForm && (\n        <div className=\"p-4 bg-card border-t\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Tipe</label>\n                <Select value={entryData.type} onValueChange={(value) => setEntryData({...entryData, type: value})}>\n                  <SelectTrigger data-testid=\"select-entry-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"income\">Pemasukan</SelectItem>\n                    <SelectItem value=\"expense\">Pengeluaran</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Kategori</label>\n                <Select value={entryData.category} onValueChange={(value) => setEntryData({...entryData, category: value})}>\n                  <SelectTrigger data-testid=\"select-entry-category\">\n                    <SelectValue placeholder=\"Pilih kategori\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {entryData.type === \"income\" ? (\n                      <>\n                        <SelectItem value=\"sales\">Penjualan</SelectItem>\n                        <SelectItem value=\"debt\">Pembayaran Piutang</SelectItem>\n                        <SelectItem value=\"loan\">Pinjaman</SelectItem>\n                        <SelectItem value=\"other\">Lainnya</SelectItem>\n                      </>\n                    ) : (\n                      <>\n                        <SelectItem value=\"purchase\">Pembelian</SelectItem>\n                        <SelectItem value=\"operational\">Operasional</SelectItem>\n                        <SelectItem value=\"marketing\">Marketing</SelectItem>\n                        <SelectItem value=\"salary\">Gaji</SelectItem>\n                        <SelectItem value=\"rent\">Sewa</SelectItem>\n                        <SelectItem value=\"utilities\">Listrik/Air</SelectItem>\n                        <SelectItem value=\"other\">Lainnya</SelectItem>\n                      </>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium\">Deskripsi</label>\n              <Input\n                type=\"text\"\n                placeholder=\"Deskripsi transaksi\"\n                value={entryData.description}\n                onChange={(e) => setEntryData({...entryData, description: e.target.value})}\n                data-testid=\"input-entry-description\"\n              />\n            </div>\n\n            {/* Customer Selection for Debt Payment */}\n            {entryData.category === \"debt\" && (\n              <div>\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <User className=\"w-4 h-4\" />\n                  Pelanggan\n                </label>\n                <Select value={entryData.customerId} onValueChange={(value) => setEntryData({...entryData, customerId: value})}>\n                  <SelectTrigger data-testid=\"select-debt-customer\">\n                    <SelectValue placeholder=\"Pilih pelanggan yang membayar piutang...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers?.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.name} {customer.phone && `(${customer.phone})`}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  <CreditCard className=\"w-3 h-3 inline mr-1\" />\n                  Catat pembayaran piutang dari pelanggan\n                </p>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Jumlah</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0\"\n                  value={entryData.amount}\n                  onChange={(e) => setEntryData({...entryData, amount: e.target.value})}\n                  data-testid=\"input-entry-amount\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Metode</label>\n                <Select value={entryData.paymentMethod} onValueChange={(value) => setEntryData({...entryData, paymentMethod: value})}>\n                  <SelectTrigger data-testid=\"select-entry-payment-method\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Tunai</SelectItem>\n                    <SelectItem value=\"transfer\">Transfer</SelectItem>\n                    <SelectItem value=\"qris\">QRIS</SelectItem>\n                    <SelectItem value=\"ewallet\">E-Wallet</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowAddForm(false)}\n                data-testid=\"button-cancel-add\"\n              >\n                Batal\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createEntryMutation.isPending}\n                data-testid=\"button-save-entry\"\n              >\n                {createEntryMutation.isPending ? \"Menyimpan...\" : \"Simpan\"}\n              </Button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Entries List */}\n      <div className=\"flex-1 p-4\">\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Memuat data...</p>\n          </div>\n        ) : entries && entries.length > 0 ? (\n          <div className=\"space-y-3\">\n            {entries.map((entry: any) => (\n              <div \n                key={entry.id} \n                className=\"bg-card border rounded-lg p-4\"\n                data-testid={`entry-${entry.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className={`p-2 rounded-full ${entry.type === 'income' ? 'bg-success/10' : 'bg-destructive/10'}`}>\n                      <i className={`${getCategoryIcon(entry.category)} text-sm ${entry.type === 'income' ? 'text-success' : 'text-destructive'}`}></i>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{entry.description}</p>\n                      <p className=\"text-sm text-muted-foreground capitalize\">\n                        {entry.category} • {format(new Date(entry.createdAt), \"dd MMM yyyy\", { locale: id })}\n                      </p>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <i className={`${getPaymentMethodIcon(entry.paymentMethod)} text-xs text-muted-foreground`}></i>\n                        <p className=\"text-xs text-muted-foreground capitalize\">{entry.paymentMethod}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`font-semibold ${entry.type === 'income' ? 'text-success' : 'text-destructive'}`}>\n                      {entry.type === 'income' ? '+' : '-'}{formatCurrency(parseFloat(entry.amount))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-chart-line text-4xl text-muted-foreground mb-4\"></i>\n            <p className=\"text-muted-foreground\">Belum ada data arus kas</p>\n            <p className=\"text-sm text-muted-foreground\">Tambah entry pertama Anda</p>\n          </div>\n        )}\n      </div>\n    </MobileLayout>\n  );\n}","size_bytes":15572},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport CustomerCard from \"@/components/customers/customer-card\";\nimport AddCustomerModal from \"@/components/customers/add-customer-modal\";\nimport DebtPaymentModal from \"@/components/customers/debt-payment-modal\";\nimport DebtListModal from \"@/components/customers/debt-list-modal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<any>(null);\n  const [payingDebt, setPayingDebt] = useState<any>(null);\n  const [viewingDebtDetail, setViewingDebtDetail] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/customers\"],\n  });\n\n  const { data: debts } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/debts\"],\n  });\n\n  const sendReminderMutation = useMutation({\n    mutationFn: async (debtId: string) => {\n      return await apiRequest(\"POST\", `/api/debts/${debtId}/reminder`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Reminder berhasil dikirim\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mengirim reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCustomers = customers?.filter((customer: any) =>\n    customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.phone?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const totalDebt = debts?.reduce((sum: number, debt: any) => \n    debt.status === 'pending' ? sum + (parseFloat(debt.amount) - parseFloat(debt.paidAmount || '0')) : sum, 0) || 0;\n  \n  const overdueDebts = debts?.filter((debt: any) => \n    debt.status === 'pending' && debt.dueDate && new Date(debt.dueDate) < new Date()) || [];\n  \n  const overdueAmount = overdueDebts.reduce((sum: number, debt: any) => \n    sum + (parseFloat(debt.amount) - parseFloat(debt.paidAmount || '0')), 0);\n\n  const customersWithDebt = debts?.filter((debt: any) => \n    debt.status === 'pending' && parseFloat(debt.amount) > parseFloat(debt.paidAmount || '0')\n  ).length || 0;\n\n  if (isLoading) {\n    return (\n      <MobileLayout currentPage=\"customers\">\n        <div className=\"p-4\">\n          <div className=\"space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-card border rounded-lg p-4 animate-pulse\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div>\n                      <div className=\"h-4 bg-muted rounded mb-1 w-24\"></div>\n                      <div className=\"h-3 bg-muted rounded w-32\"></div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"h-3 bg-muted rounded w-20\"></div>\n                  <div className=\"h-8 bg-muted rounded w-24\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout currentPage=\"customers\">\n      {/* Search */}\n      <div className=\"p-4 bg-card border-b\">\n        <div className=\"relative\">\n          <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n          <Input\n            type=\"text\"\n            placeholder=\"Cari pelanggan...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-customers\"\n          />\n        </div>\n      </div>\n\n      {/* Debt Summary */}\n      <div className=\"p-4 bg-card border-b\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-warning\" data-testid=\"text-total-debt\">\n              {formatCurrency(totalDebt).replace('.00', '')}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Total Piutang</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-overdue-debt\">\n              {formatCurrency(overdueAmount).replace('.00', '')}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Jatuh Tempo</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold\" data-testid=\"text-customers-with-debt\">\n              {customersWithDebt}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Pelanggan</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Customers List */}\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">\n            Pelanggan ({filteredCustomers?.length || 0})\n          </h3>\n          <Button \n            onClick={() => setShowAddModal(true)}\n            data-testid=\"button-add-customer\"\n          >\n            <i className=\"fas fa-plus mr-2\"></i>\n            Tambah\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {filteredCustomers?.map((customer: any) => {\n            const customerDebts = debts?.filter((debt: any) => \n              debt.customerId === customer.id && debt.status === 'pending'\n            ) || [];\n            \n            const customerDebtAmount = customerDebts.reduce((sum: number, debt: any) => \n              sum + (parseFloat(debt.amount) - parseFloat(debt.paidAmount || '0')), 0);\n\n            const hasOverdueDebt = customerDebts.some((debt: any) => \n              debt.dueDate && new Date(debt.dueDate) < new Date()\n            );\n\n            return (\n              <CustomerCard\n                key={customer.id}\n                customer={customer}\n                debtAmount={customerDebtAmount}\n                hasOverdueDebt={hasOverdueDebt}\n                onSendReminder={(debtId) => sendReminderMutation.mutate(debtId)}\n                isLoadingReminder={sendReminderMutation.isPending}\n                onEdit={() => setEditingCustomer(customer)}\n                debts={customerDebts}\n                onPayDebt={(debt) => setPayingDebt(debt)}\n                onViewDebtDetail={() => setViewingDebtDetail(customer)}\n              />\n            );\n          })}\n          \n          {filteredCustomers?.length === 0 && (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-users text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-muted-foreground mb-2\">\n                {searchQuery \n                  ? \"Tidak ada pelanggan yang sesuai\"\n                  : \"Belum ada pelanggan\"\n                }\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <AddCustomerModal\n        isOpen={showAddModal}\n        onClose={() => setShowAddModal(false)}\n      />\n\n      <AddCustomerModal\n        isOpen={!!editingCustomer}\n        onClose={() => setEditingCustomer(null)}\n        customer={editingCustomer}\n        isEdit={true}\n      />\n\n      <DebtPaymentModal\n        isOpen={!!payingDebt}\n        onClose={() => setPayingDebt(null)}\n        debt={payingDebt}\n      />\n\n      <DebtListModal\n        isOpen={!!viewingDebtDetail}\n        onClose={() => setViewingDebtDetail(null)}\n        customer={viewingDebtDetail}\n      />\n    </MobileLayout>\n  );\n}\n","size_bytes":8150},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { useStore } from \"@/hooks/useStore\";\nimport { Link } from \"wouter\";\nimport type { DashboardStats } from \"@shared/schema\";\nimport { TrendingUp, Receipt, Clock, AlertTriangle, Plus, Eye, FileText, Calculator, Package2, BarChart3, NotebookPen } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { activeStoreId } = useStore();\n  \n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [`/api/stores/${activeStoreId}/dashboard`],\n    enabled: !!activeStoreId,\n  });\n\n  if (isLoading) {\n    return (\n      <MobileLayout currentPage=\"dashboard\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-2 gap-3 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-lg p-4 border shadow-sm animate-pulse\">\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded mb-1\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout currentPage=\"dashboard\">\n      <div className=\"p-4\">\n        {/* Quick Stats Cards */}\n        <div className=\"grid grid-cols-2 gap-3 mb-6\">\n          <div className=\"bg-card rounded-lg p-4 border shadow-sm\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Omzet Hari Ini</h3>\n              <TrendingUp className=\"w-4 h-4 text-success\" />\n            </div>\n            <p className=\"text-2xl font-bold text-success\" data-testid=\"text-daily-sales\">\n              {formatCurrency(stats?.dailySales || 0)}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">+15% dari kemarin</p>\n          </div>\n          \n          <div className=\"bg-card rounded-lg p-4 border shadow-sm\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Transaksi</h3>\n              <Receipt className=\"w-4 h-4 text-primary\" />\n            </div>\n            <p className=\"text-2xl font-bold\" data-testid=\"text-transaction-count\">\n              {stats?.transactionCount || 0}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">Transaksi hari ini</p>\n          </div>\n          \n          <div className=\"bg-card rounded-lg p-4 border shadow-sm\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Piutang</h3>\n              <Clock className=\"w-4 h-4 text-warning\" />\n            </div>\n            <p className=\"text-2xl font-bold text-warning\" data-testid=\"text-total-debt\">\n              {formatCurrency(stats?.totalDebt || 0)}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">12 pelanggan</p>\n          </div>\n          \n          <div className=\"bg-card rounded-lg p-4 border shadow-sm\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-medium text-muted-foreground\">Stok Kritis</h3>\n              <AlertTriangle className=\"w-4 h-4 text-destructive\" />\n            </div>\n            <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-low-stock\">\n              {stats?.lowStockCount || 0}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">Produk perlu restock</p>\n          </div>\n        </div>\n\n        {/* Feature Menu */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n            <span className=\"mr-2\">Fitur Andalan Kamu</span>\n            <span className=\"text-lg\">👌</span>\n          </h3>\n          <div className=\"grid grid-cols-5 gap-3\">\n            <Link href=\"/customers\">\n              <a className=\"flex flex-col items-center space-y-2 p-3 hover:bg-accent rounded-lg transition-colors\" data-testid=\"button-debt-record\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <NotebookPen className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <span className=\"text-xs text-center font-medium\">Catat Utang</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/cashflow\">\n              <a className=\"flex flex-col items-center space-y-2 p-3 hover:bg-accent rounded-lg transition-colors\" data-testid=\"button-bookkeeping\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n                <span className=\"text-xs text-center font-medium\">Catat Pembukuan</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/pos\">\n              <a className=\"flex flex-col items-center space-y-2 p-3 hover:bg-accent rounded-lg transition-colors\" data-testid=\"button-cashier-mode\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Calculator className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <span className=\"text-xs text-center font-medium\">Mode Kasir</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/products\">\n              <a className=\"flex flex-col items-center space-y-2 p-3 hover:bg-accent rounded-lg transition-colors\" data-testid=\"button-manage-stock\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Package2 className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <span className=\"text-xs text-center font-medium\">Kelola Stok</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/reports\">\n              <a className=\"flex flex-col items-center space-y-2 p-3 hover:bg-accent rounded-lg transition-colors\" data-testid=\"button-business-reports\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <span className=\"text-xs text-center font-medium\">Laporan Usaha</span>\n              </a>\n            </Link>\n          </div>\n        </div>\n\n        {/* Recent Transactions */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-lg font-semibold\">Transaksi Terakhir</h3>\n            <Link href=\"/reports\">\n              <a className=\"text-primary text-sm font-medium\" data-testid=\"link-view-all-transactions\">\n                Lihat Semua\n              </a>\n            </Link>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {stats?.recentTransactions?.slice(0, 3).map((transaction: any) => (\n              <div key={transaction.id} className=\"bg-card rounded-lg p-3 border flex items-center justify-between\" data-testid={`transaction-${transaction.id}`}>\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    transaction.paymentStatus === 'paid' \n                      ? 'bg-success/10' \n                      : 'bg-warning/10'\n                  }`}>\n                    {transaction.paymentStatus === 'paid' ? (\n                      <TrendingUp className=\"w-5 h-5 text-success\" />\n                    ) : (\n                      <Clock className=\"w-5 h-5 text-warning\" />\n                    )}\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">{transaction.invoiceNumber}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(transaction.createdAt).toLocaleTimeString('id-ID', { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold\">{formatCurrency(parseFloat(transaction.total))}</p>\n                  <p className={`text-xs ${\n                    transaction.paymentStatus === 'paid' \n                      ? 'text-success' \n                      : 'text-warning'\n                  }`}>\n                    {transaction.paymentMethod || 'Belum Bayar'}\n                  </p>\n                </div>\n              </div>\n            ))}\n            \n            {(!stats?.recentTransactions || stats.recentTransactions.length === 0) && (\n              <div className=\"text-center py-8\">\n                <Receipt className=\"w-16 h-16 text-muted-foreground mb-4 mx-auto\" />\n                <p className=\"text-muted-foreground\">Belum ada transaksi hari ini</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MobileLayout>\n  );\n}\n","size_bytes":9316},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Lock, Mail, User } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const { toast } = useToast();\n  const { setUser } = useAuth();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log(\"Login successful, user data:\", data.user);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setUser(data.user); // Update the auth state immediately\n      toast({\n        title: \"Login berhasil\",\n        description: `Selamat datang, ${data.user?.name || 'Pengguna'}!`,\n      });\n      // Add small delay to ensure localStorage is written\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login gagal\",\n        description: error.message || \"Email atau password tidak valid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Error\",\n        description: \"Email dan password harus diisi\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(formData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n            <User className=\"w-8 h-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Masuk ke BukuWarung</CardTitle>\n          <CardDescription>\n            Masuk dengan akun Anda untuk mengakses aplikasi\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                <Mail className=\"w-4 h-4\" />\n                Email\n              </label>\n              <Input\n                type=\"email\"\n                placeholder=\"Masukkan email Anda\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                data-testid=\"input-email\"\n                autoComplete=\"email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                <Lock className=\"w-4 h-4\" />\n                Password\n              </label>\n              <Input\n                type=\"password\"\n                placeholder=\"Masukkan password Anda\"\n                value={formData.password}\n                onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                data-testid=\"input-password\"\n                autoComplete=\"current-password\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Masuk...\" : \"Masuk\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Demo credentials: admin@pos.com / admin123\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4319},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pos.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useStore } from \"@/hooks/useStore\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport CartItem from \"@/components/pos/cart-item\";\nimport PaymentModal from \"@/components/pos/payment-modal\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, Plus } from \"lucide-react\";\n\ninterface CartItemType {\n  id: string;\n  productId: string;\n  name: string;\n  price: number;\n  quantity: number;\n  stock: number;\n}\n\nexport default function POS() {\n  const [cart, setCart] = useState<CartItemType[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [discount, setDiscount] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [selectedCustomer, setSelectedCustomer] = useState<string>(\"\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeStoreId } = useStore();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [`/api/stores/${activeStoreId}/products`],\n    enabled: !!activeStoreId,\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [`/api/stores/${activeStoreId}/customers`],\n    enabled: !!activeStoreId,\n  });\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (transactionData: any) => {\n      if (!activeStoreId) {\n        throw new Error(\"Store tidak dipilih\");\n      }\n      return await apiRequest(\"POST\", `/api/stores/${activeStoreId}/transactions`, transactionData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Transaksi berhasil disimpan\",\n      });\n      setCart([]);\n      setDiscount(0);\n      setTax(0);\n      setSelectedCustomer(\"\");\n      queryClient.invalidateQueries({ queryKey: [`/api/stores/${activeStoreId}/dashboard`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/stores/${activeStoreId}/debts`] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menyimpan transaksi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const total = subtotal - discount + tax;\n\n  const addToCart = (product: any) => {\n    const existingItem = cart.find(item => item.productId === product.id);\n    \n    if (existingItem) {\n      if (existingItem.quantity >= product.stock) {\n        toast({\n          title: \"Stok tidak cukup\",\n          description: `Stok ${product.name} hanya ${product.stock}`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setCart(cart.map(item => \n        item.productId === product.id \n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      ));\n    } else {\n      if (product.stock <= 0) {\n        toast({\n          title: \"Stok habis\",\n          description: `${product.name} sedang habis`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setCart([...cart, {\n        id: Date.now().toString(),\n        productId: product.id,\n        name: product.name,\n        price: parseFloat(product.priceSell),\n        quantity: 1,\n        stock: product.stock,\n      }]);\n    }\n  };\n\n  const updateQuantity = (itemId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    \n    const item = cart.find(i => i.id === itemId);\n    if (item && newQuantity > item.stock) {\n      toast({\n        title: \"Stok tidak cukup\",\n        description: `Stok ${item.name} hanya ${item.stock}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setCart(cart.map(item => \n      item.id === itemId \n        ? { ...item, quantity: newQuantity }\n        : item\n    ));\n  };\n\n  const removeFromCart = (itemId: string) => {\n    setCart(cart.filter(item => item.id !== itemId));\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    setDiscount(0);\n    setTax(0);\n  };\n\n  const handlePayment = (paymentMethod: string) => {\n    if (!activeStoreId) {\n      toast({\n        title: \"Store tidak dipilih\",\n        description: \"Silakan login ulang untuk memilih store\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (cart.length === 0) {\n      toast({\n        title: \"Keranjang kosong\",\n        description: \"Tambahkan produk terlebih dahulu\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === 'debt' && !selectedCustomer) {\n      toast({\n        title: \"Pilih pelanggan\",\n        description: \"Pilih pelanggan terlebih dahulu untuk transaksi hutang\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const transactionData = {\n      items: cart.map(item => ({\n        productId: item.productId,\n        productName: item.name,\n        quantity: item.quantity,\n        price: item.price,\n        discount: 0,\n      })),\n      subtotal: subtotal.toString(),\n      discount: discount.toString(),\n      tax: tax.toString(),\n      total: total.toString(),\n      paymentStatus: paymentMethod === 'debt' ? 'unpaid' : 'paid',\n      paymentMethod: paymentMethod === 'debt' ? null : paymentMethod,\n      customerId: paymentMethod === 'debt' ? selectedCustomer : null,\n    };\n\n    createTransactionMutation.mutate(transactionData);\n    setShowPaymentModal(false);\n  };\n\n  const filteredProducts = products?.filter((product: any) =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.sku.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <MobileLayout currentPage=\"pos\">\n      {/* Search */}\n      <div className=\"p-4 bg-card border-b\">\n        <div className=\"relative\">\n          <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n          <Input\n            type=\"text\"\n            placeholder=\"Cari produk atau scan barcode...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 pr-12\"\n            data-testid=\"input-search-product\"\n          />\n          <button \n            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 p-2 hover:bg-muted rounded\"\n            data-testid=\"button-scan-barcode\"\n          >\n            <i className=\"fas fa-qrcode\"></i>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex-1 p-4\">\n        {/* Product List */}\n        {searchQuery && (\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold mb-3\">Hasil Pencarian</h3>\n            <div className=\"grid grid-cols-1 gap-2 max-h-48 overflow-y-auto\">\n              {filteredProducts?.map((product: any) => (\n                <button\n                  key={product.id}\n                  onClick={() => addToCart(product)}\n                  className=\"flex items-center justify-between p-3 bg-card border rounded-lg hover:bg-muted/50 text-left\"\n                  data-testid={`product-${product.id}`}\n                >\n                  <div>\n                    <p className=\"font-medium\">{product.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatCurrency(parseFloat(product.priceSell))} • Stok: {product.stock}\n                    </p>\n                  </div>\n                  <i className=\"fas fa-plus text-primary\"></i>\n                </button>\n              ))}\n              \n              {filteredProducts?.length === 0 && (\n                <p className=\"text-center text-muted-foreground py-4\">\n                  Tidak ada produk yang ditemukan\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Cart Items */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-lg font-semibold\">Keranjang Belanja</h3>\n            {cart.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={clearCart}\n                data-testid=\"button-clear-cart\"\n              >\n                <i className=\"fas fa-trash text-destructive mr-2\"></i>\n                Kosongkan\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"space-y-3 mb-6\">\n            {cart.map((item) => (\n              <CartItem\n                key={item.id}\n                item={item}\n                onUpdateQuantity={updateQuantity}\n                onRemove={removeFromCart}\n              />\n            ))}\n            \n            {cart.length === 0 && (\n              <div className=\"text-center py-8\">\n                <i className=\"fas fa-shopping-cart text-4xl text-muted-foreground mb-4\"></i>\n                <p className=\"text-muted-foreground\">Keranjang masih kosong</p>\n                <p className=\"text-sm text-muted-foreground\">Cari dan tambahkan produk di atas</p>\n              </div>\n            )}\n          </div>\n\n          {/* Customer Selection */}\n          {cart.length > 0 && (\n            <div className=\"bg-card border rounded-lg p-4 mb-4\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <User className=\"w-5 h-5 text-primary\" />\n                <h4 className=\"font-medium\">Pilih Pelanggan (Opsional)</h4>\n              </div>\n              <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                <SelectTrigger className=\"w-full\" data-testid=\"select-customer\">\n                  <SelectValue placeholder=\"Pilih pelanggan untuk transaksi hutang...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"general\">Pembeli umum</SelectItem>\n                  {customers?.map((customer: any) => (\n                    <SelectItem key={customer.id} value={customer.id}>\n                      {customer.name} {customer.phone && `(${customer.phone})`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedCustomer && (\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  <User className=\"w-4 h-4 inline mr-1\" />\n                  Transaksi akan dicatat atas nama: {customers?.find((c: any) => c.id === selectedCustomer)?.name}\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Summary */}\n        {cart.length > 0 && (\n          <div className=\"bg-card border rounded-lg p-4 mb-4\">\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Subtotal:</span>\n                <span data-testid=\"text-subtotal\">{formatCurrency(subtotal)}</span>\n              </div>\n              {discount > 0 && (\n                <div className=\"flex justify-between text-success\">\n                  <span>Diskon:</span>\n                  <span data-testid=\"text-discount\">- {formatCurrency(discount)}</span>\n                </div>\n              )}\n              {tax > 0 && (\n                <div className=\"flex justify-between\">\n                  <span>Pajak:</span>\n                  <span data-testid=\"text-tax\">{formatCurrency(tax)}</span>\n                </div>\n              )}\n              <hr className=\"border-muted\" />\n              <div className=\"flex justify-between font-semibold text-lg\">\n                <span>Total:</span>\n                <span className=\"text-primary\" data-testid=\"text-total\">\n                  {formatCurrency(total)}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Payment Actions */}\n      {cart.length > 0 && (\n        <div className=\"bg-card border-t p-4\">\n          <Button \n            className=\"w-full mb-3\"\n            size=\"lg\"\n            onClick={() => setShowPaymentModal(true)}\n            data-testid=\"button-process-payment\"\n          >\n            <i className=\"fas fa-money-bill-wave mr-2\"></i>\n            Bayar - {formatCurrency(total)}\n          </Button>\n        </div>\n      )}\n\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => setShowPaymentModal(false)}\n        onPayment={handlePayment}\n        total={total}\n        isProcessing={createTransactionMutation.isPending}\n      />\n    </MobileLayout>\n  );\n}\n","size_bytes":12757},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport ProductCard from \"@/components/products/product-card\";\nimport AddProductModal from \"@/components/products/add-product-modal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Products() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/products\"],\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      return await apiRequest(\"DELETE\", `/api/products/${productId}`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Produk berhasil dihapus\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus produk\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products?.filter((product: any) => {\n    const matchesSearch = \n      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.sku.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesFilter = \n      filter === \"all\" ||\n      (filter === \"low-stock\" && product.stock <= 5) ||\n      (filter === \"out-of-stock\" && product.stock === 0);\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  const handleDeleteProduct = (productId: string) => {\n    if (window.confirm(\"Apakah Anda yakin ingin menghapus produk ini?\")) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <MobileLayout currentPage=\"products\">\n        <div className=\"p-4\">\n          <div className=\"space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-card border rounded-lg p-4 animate-pulse\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-muted rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  return (\n    <MobileLayout currentPage=\"products\">\n      {/* Search & Filters */}\n      <div className=\"p-4 bg-card border-b\">\n        <div className=\"relative mb-3\">\n          <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n          <Input\n            type=\"text\"\n            placeholder=\"Cari produk...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-products\"\n          />\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setFilter(\"all\")}\n            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n              filter === \"all\" \n                ? \"bg-primary text-primary-foreground\" \n                : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n            }`}\n            data-testid=\"filter-all\"\n          >\n            Semua\n          </button>\n          <button\n            onClick={() => setFilter(\"low-stock\")}\n            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n              filter === \"low-stock\" \n                ? \"bg-primary text-primary-foreground\" \n                : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n            }`}\n            data-testid=\"filter-low-stock\"\n          >\n            Stok Rendah\n          </button>\n          <button\n            onClick={() => setFilter(\"out-of-stock\")}\n            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n              filter === \"out-of-stock\" \n                ? \"bg-primary text-primary-foreground\" \n                : \"bg-muted text-muted-foreground hover:bg-muted/80\"\n            }`}\n            data-testid=\"filter-out-of-stock\"\n          >\n            Habis\n          </button>\n        </div>\n      </div>\n\n      {/* Products List */}\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">\n            Produk ({filteredProducts?.length || 0})\n          </h3>\n          <Button \n            onClick={() => setShowAddModal(true)}\n            data-testid=\"button-add-product\"\n          >\n            <i className=\"fas fa-plus mr-2\"></i>\n            Tambah\n          </Button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {filteredProducts?.map((product: any) => (\n            <ProductCard\n              key={product.id}\n              product={product}\n              onDelete={handleDeleteProduct}\n            />\n          ))}\n          \n          {filteredProducts?.length === 0 && (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-boxes text-4xl text-muted-foreground mb-4\"></i>\n              <p className=\"text-muted-foreground mb-2\">\n                {searchQuery || filter !== \"all\" \n                  ? \"Tidak ada produk yang sesuai\"\n                  : \"Belum ada produk\"\n                }\n              </p>\n              {!searchQuery && filter === \"all\" && (\n                <Button \n                  onClick={() => setShowAddModal(true)}\n                  data-testid=\"button-add-first-product\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Tambah Produk Pertama\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <AddProductModal\n        isOpen={showAddModal}\n        onClose={() => setShowAddModal(false)}\n      />\n    </MobileLayout>\n  );\n}\n","size_bytes":6569},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport MobileLayout from \"@/components/layout/mobile-layout\";\nimport StatsCard from \"@/components/reports/stats-card\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState({\n    from: new Date(new Date().setDate(1)).toISOString().split('T')[0], // First day of current month\n    to: new Date().toISOString().split('T')[0], // Today\n  });\n  \n  const { toast } = useToast();\n\n  const { data: report, isLoading } = useQuery({\n    queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/reports/sales\", dateRange.from, dateRange.to],\n    queryFn: () => \n      fetch(`/api/stores/550e8400-e29b-41d4-a716-446655440001/reports/sales?from=${dateRange.from}&to=${dateRange.to}`)\n        .then(res => res.json())\n  });\n\n  const handleExportPDF = () => {\n    toast({\n      title: \"Info\",\n      description: \"Fitur export PDF akan segera tersedia\",\n    });\n  };\n\n  const handleExportExcel = () => {\n    toast({\n      title: \"Info\", \n      description: \"Fitur export Excel akan segera tersedia\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <MobileLayout currentPage=\"reports\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-2 gap-3 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-lg p-4 border animate-pulse\">\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded mb-1\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </MobileLayout>\n    );\n  }\n\n  const formatDateRange = () => {\n    const from = new Date(dateRange.from).toLocaleDateString('id-ID', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    });\n    const to = new Date(dateRange.to).toLocaleDateString('id-ID', {\n      day: 'numeric', \n      month: 'long',\n      year: 'numeric'\n    });\n    return `${from} - ${to}`;\n  };\n\n  return (\n    <MobileLayout currentPage=\"reports\">\n      {/* Date Range Filter */}\n      <div className=\"p-4 bg-card border-b\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"font-medium\">Periode Laporan</span>\n          <button className=\"text-primary text-sm font-medium\" data-testid=\"button-change-date\">\n            Ubah\n          </button>\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm\">\n          <i className=\"fas fa-calendar text-muted-foreground\"></i>\n          <span data-testid=\"text-report-period\">{formatDateRange()}</span>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Sales Summary */}\n        <h3 className=\"text-lg font-semibold mb-4\">Ringkasan Penjualan</h3>\n        \n        <div className=\"grid grid-cols-2 gap-3 mb-6\">\n          <StatsCard\n            title=\"Total Omzet\"\n            value={formatCurrency(report?.totalRevenue || 0)}\n            change=\"+18% dari periode lalu\"\n            icon=\"fas fa-chart-line\"\n            color=\"success\"\n            testId=\"total-revenue\"\n          />\n          \n          <StatsCard\n            title=\"Total Transaksi\"\n            value={report?.totalTransactions || 0}\n            change=\"+12% dari periode lalu\"\n            icon=\"fas fa-receipt\"\n            color=\"primary\"\n            testId=\"total-transactions\"\n          />\n          \n          <StatsCard\n            title=\"Laba Kotor\"\n            value={formatCurrency(report?.grossProfit || 0)}\n            change=\"Margin 27%\"\n            icon=\"fas fa-coins\"\n            color=\"warning\"\n            testId=\"gross-profit\"\n          />\n          \n          <StatsCard\n            title=\"Rata-rata per Transaksi\"\n            value={formatCurrency(report?.averageTransaction || 0)}\n            change=\"+5% dari periode lalu\"\n            icon=\"fas fa-calculator\"\n            color=\"accent\"\n            testId=\"average-transaction\"\n          />\n        </div>\n\n        {/* Top Products */}\n        <div className=\"mb-6\">\n          <h4 className=\"font-semibold mb-3\">Produk Terlaris</h4>\n          <div className=\"bg-card border rounded-lg p-4\">\n            {report?.topProducts?.length > 0 ? (\n              <div className=\"space-y-3\">\n                {report.topProducts.slice(0, 3).map((product: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`top-product-${index + 1}`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        index === 0 ? 'bg-primary/10' : index === 1 ? 'bg-secondary/10' : 'bg-muted'\n                      }`}>\n                        <span className={`text-xs font-bold ${\n                          index === 0 ? 'text-primary' : index === 1 ? 'text-secondary' : 'text-muted-foreground'\n                        }`}>\n                          {index + 1}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{product.productName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{product.quantity} terjual</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">{formatCurrency(product.revenue)}</p>\n                      <p className=\"text-xs text-success\">+24%</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                Tidak ada data produk untuk periode ini\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Payment Methods */}\n        <div className=\"mb-6\">\n          <h4 className=\"font-semibold mb-3\">Metode Pembayaran</h4>\n          <div className=\"bg-card border rounded-lg p-4\">\n            {report?.paymentMethods?.length > 0 ? (\n              <div className=\"space-y-4\">\n                {report.paymentMethods.map((method: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`payment-method-${method.method}`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <i className={`fas ${\n                        method.method === 'cash' ? 'fa-money-bill-wave text-success' :\n                        method.method === 'transfer' ? 'fa-university text-primary' :\n                        'fa-qrcode text-accent'\n                      }`}></i>\n                      <span>{method.method}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">{formatCurrency(method.amount)}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {Math.round((method.amount / (report?.totalRevenue || 1)) * 100)}% dari total\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-money-bill-wave text-success\"></i>\n                    <span>Tunai</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">{formatCurrency((report?.totalRevenue || 0) * 0.6)}</p>\n                    <p className=\"text-xs text-muted-foreground\">60% dari total</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-university text-primary\"></i>\n                    <span>Transfer</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">{formatCurrency((report?.totalRevenue || 0) * 0.4)}</p>\n                    <p className=\"text-xs text-muted-foreground\">40% dari total</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Export Options */}\n        <div className=\"mb-6\">\n          <h4 className=\"font-semibold mb-3\">Export Laporan</h4>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button \n              className=\"success\" \n              onClick={handleExportPDF}\n              data-testid=\"button-export-pdf\"\n            >\n              <i className=\"fas fa-file-pdf mr-2\"></i>\n              Export PDF\n            </Button>\n            \n            <Button \n              onClick={handleExportExcel}\n              data-testid=\"button-export-excel\"\n            >\n              <i className=\"fas fa-file-excel mr-2\"></i>\n              Export Excel\n            </Button>\n          </div>\n        </div>\n      </div>\n    </MobileLayout>\n  );\n}\n","size_bytes":9391},"client/src/components/customers/add-customer-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useStore } from \"@/hooks/useStore\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst customerSchema = z.object({\n  name: z.string().min(1, \"Nama pelanggan wajib diisi\"),\n  phone: z.string().optional(),\n  email: z.string().email(\"Format email tidak valid\").optional().or(z.literal(\"\")),\n  address: z.string().optional(),\n});\n\ntype CustomerFormData = z.infer<typeof customerSchema>;\n\ninterface AddCustomerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  customer?: any;\n  isEdit?: boolean;\n}\n\nexport default function AddCustomerModal({ \n  isOpen, \n  onClose, \n  customer, \n  isEdit = false \n}: AddCustomerModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeStoreId } = useStore();\n\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerSchema),\n    defaultValues: {\n      name: customer?.name || \"\",\n      phone: customer?.phone || \"\",\n      email: customer?.email || \"\",\n      address: customer?.address || \"\",\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData: any) => {\n      const url = isEdit \n        ? `/api/customers/${customer.id}`\n        : `/api/stores/${activeStoreId}/customers`;\n      const method = isEdit ? \"PUT\" : \"POST\";\n      return await apiRequest(method, url, customerData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: isEdit \n          ? \"Pelanggan berhasil diperbarui\" \n          : \"Pelanggan berhasil ditambahkan\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [`/api/stores/${activeStoreId}/customers`] \n      });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: isEdit \n          ? \"Gagal memperbarui pelanggan\" \n          : \"Gagal menambahkan pelanggan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CustomerFormData) => {\n    createCustomerMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEdit ? \"Edit Pelanggan\" : \"Tambah Pelanggan Baru\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nama Pelanggan</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Masukkan nama pelanggan\" \n                      {...field} \n                      data-testid=\"input-customer-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nomor Telepon</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"+62812-3456-7890\" \n                      {...field} \n                      data-testid=\"input-customer-phone\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email (Opsional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"email\"\n                      placeholder=\"nama@email.com\" \n                      {...field} \n                      data-testid=\"input-customer-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Alamat (Opsional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Masukkan alamat pelanggan\" \n                      {...field} \n                      data-testid=\"input-customer-address\"\n                      rows={3}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Batal\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\" \n                disabled={createCustomerMutation.isPending}\n                data-testid=\"button-save-customer\"\n              >\n                {createCustomerMutation.isPending \n                  ? \"Menyimpan...\" \n                  : isEdit ? \"Perbarui\" : \"Simpan\"\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6156},"client/src/components/customers/customer-card.tsx":{"content":"import { formatCurrency } from \"@/lib/currency\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye } from \"lucide-react\";\n\ninterface CustomerCardProps {\n  customer: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n  };\n  debtAmount: number;\n  hasOverdueDebt: boolean;\n  onSendReminder: (debtId: string) => void;\n  isLoadingReminder: boolean;\n  onEdit?: () => void;\n  debts?: any[];\n  onPayDebt?: (debt: any) => void;\n  onViewDebtDetail?: () => void;\n}\n\nexport default function CustomerCard({\n  customer,\n  debtAmount,\n  hasOverdueDebt,\n  onSendReminder,\n  isLoadingReminder,\n  onEdit,\n  debts,\n  onPayDebt,\n  onViewDebtDetail,\n}: CustomerCardProps) {\n  const hasDebt = debtAmount > 0;\n\n  return (\n    <div className=\"bg-card border rounded-lg p-4\" data-testid={`customer-${customer.id}`}>\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n            hasDebt ? 'bg-primary/10' : 'bg-success/10'\n          }`}>\n            <i className={`fas fa-user ${hasDebt ? 'text-primary' : 'text-success'}`}></i>\n          </div>\n          <div>\n            <h3 className=\"font-semibold\" data-testid=\"text-customer-name\">\n              {customer.name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-customer-phone\">\n              {customer.phone || customer.email || \"Tidak ada kontak\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {onEdit && (\n            <button \n              onClick={onEdit}\n              className=\"p-2 hover:bg-muted rounded\"\n              data-testid=\"button-edit-customer\"\n            >\n              <i className=\"fas fa-edit text-muted-foreground\"></i>\n            </button>\n          )}\n          <button \n            onClick={onViewDebtDetail}\n            className=\"p-2 hover:bg-muted rounded\"\n            data-testid=\"button-customer-detail\"\n          >\n            <Eye className=\"w-4 h-4 text-muted-foreground\" />\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Piutang</p>\n          {hasDebt ? (\n            <p className={`font-semibold ${hasOverdueDebt ? 'text-destructive' : 'text-warning'}`} data-testid=\"text-debt-amount\">\n              {formatCurrency(debtAmount)}\n            </p>\n          ) : (\n            <p className=\"font-semibold text-success\" data-testid=\"text-debt-status\">\n              Lunas\n            </p>\n          )}\n        </div>\n        \n        <div className=\"text-right\">\n          <p className=\"text-sm text-muted-foreground\">Status</p>\n          {hasDebt ? (\n            <p className={`text-sm font-medium ${hasOverdueDebt ? 'text-destructive' : 'text-warning'}`} data-testid=\"text-payment-status\">\n              {hasOverdueDebt ? 'Jatuh Tempo' : 'Belum Lunas'}\n            </p>\n          ) : (\n            <p className=\"text-sm font-medium text-success\" data-testid=\"text-payment-status\">\n              Lancar\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex flex-col space-y-2\">\n          {hasDebt ? (\n            <>\n              <Button\n                size=\"sm\"\n                className={hasOverdueDebt ? 'warning' : 'bg-primary text-primary-foreground hover:bg-primary/90'}\n                onClick={() => onSendReminder(customer.id)}\n                disabled={isLoadingReminder}\n                data-testid=\"button-send-reminder\"\n              >\n                <i className=\"fas fa-paper-plane mr-2\"></i>\n                {isLoadingReminder ? 'Mengirim...' : 'Ingatkan'}\n              </Button>\n              \n              {onPayDebt && debts && debts.length > 0 && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"success\"\n                  onClick={() => onPayDebt(debts[0])}\n                  data-testid=\"button-pay-debt\"\n                >\n                  <i className=\"fas fa-money-bill mr-2\"></i>\n                  Bayar\n                </Button>\n              )}\n            </>\n          ) : (\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              disabled\n              data-testid=\"button-customer-status\"\n            >\n              <i className=\"fas fa-check mr-2\"></i>\n              Lancar\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4629},"client/src/components/customers/debt-list-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useStore } from \"@/hooks/useStore\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, DollarSign, Edit, MessageCircle, Trash2 } from \"lucide-react\";\nimport EditDebtModal from \"./edit-debt-modal\";\n\ninterface DebtListModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  customer: any;\n}\n\nexport default function DebtListModal({\n  isOpen,\n  onClose,\n  customer,\n}: DebtListModalProps) {\n  const [editingDebt, setEditingDebt] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeStoreId } = useStore();\n\n  const { data: debts = [], isLoading } = useQuery({\n    queryKey: [\"/api/customers\", customer?.id, \"debts\"],\n    enabled: isOpen && !!customer?.id,\n  });\n\n  const deleteDebtMutation = useMutation({\n    mutationFn: async (debtId: string) => {\n      return await apiRequest(\"DELETE\", `/api/debts/${debtId}`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Piutang berhasil dihapus\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [`/api/stores/${activeStoreId}/debts`] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/customers\", customer.id, \"debts\"] \n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus piutang\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendReminderMutation = useMutation({\n    mutationFn: async (debtId: string) => {\n      return await apiRequest(\"POST\", `/api/debts/${debtId}/reminder`, undefined);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Reminder berhasil dikirim\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mengirim reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (debt: any) => {\n    const isOverdue = debt.dueDate && new Date(debt.dueDate) < new Date();\n    \n    if (debt.status === 'paid') {\n      return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Lunas</Badge>;\n    }\n    \n    if (isOverdue) {\n      return <Badge variant=\"destructive\">Jatuh Tempo</Badge>;\n    }\n    \n    return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Belum Lunas</Badge>;\n  };\n\n  const getRemainingAmount = (debt: any) => {\n    return parseFloat(debt.amount) - parseFloat(debt.paidAmount || '0');\n  };\n\n  if (!customer) return null;\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-md max-h-[80vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle className=\"text-left\">\n              Piutang {customer.name}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"bg-muted/50 rounded-lg p-4 animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : debts.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <DollarSign className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">Tidak ada piutang</p>\n              </div>\n            ) : (\n              (debts as any[]).map((debt: any) => (\n                <div \n                  key={debt.id} \n                  className=\"bg-card border rounded-lg p-4 space-y-3\"\n                  data-testid={`debt-${debt.id}`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-medium\" data-testid=\"text-debt-reference\">\n                          #{debt.transactionId || debt.id.slice(-8)}\n                        </h4>\n                        {getStatusBadge(debt)}\n                      </div>\n                      \n                      <div className=\"space-y-1 text-sm\">\n                        <div className=\"flex items-center gap-2 text-muted-foreground\">\n                          <DollarSign className=\"w-4 h-4\" />\n                          <span>Total: {formatCurrency(parseFloat(debt.amount))}</span>\n                        </div>\n                        \n                        {parseFloat(debt.paidAmount || '0') > 0 && (\n                          <div className=\"flex items-center gap-2 text-success\">\n                            <DollarSign className=\"w-4 h-4\" />\n                            <span>Dibayar: {formatCurrency(parseFloat(debt.paidAmount))}</span>\n                          </div>\n                        )}\n                        \n                        <div className=\"flex items-center gap-2 font-medium\">\n                          <DollarSign className=\"w-4 h-4\" />\n                          <span data-testid=\"text-remaining-amount\">\n                            Sisa: {formatCurrency(getRemainingAmount(debt))}\n                          </span>\n                        </div>\n                        \n                        {debt.dueDate && (\n                          <div className=\"flex items-center gap-2 text-muted-foreground\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span>Jatuh tempo: {new Date(debt.dueDate).toLocaleDateString('id-ID')}</span>\n                          </div>\n                        )}\n                        \n                        {debt.notes && (\n                          <div className=\"flex items-start gap-2 text-muted-foreground\">\n                            <MessageCircle className=\"w-4 h-4 mt-0.5\" />\n                            <span className=\"text-xs\">{debt.notes}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-2 border-t\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setEditingDebt(debt)}\n                      data-testid=\"button-edit-debt\"\n                    >\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Edit\n                    </Button>\n                    \n                    {debt.status === 'pending' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => sendReminderMutation.mutate(debt.id)}\n                        disabled={sendReminderMutation.isPending}\n                        data-testid=\"button-send-debt-reminder\"\n                      >\n                        <MessageCircle className=\"w-4 h-4 mr-1\" />\n                        {sendReminderMutation.isPending ? 'Mengirim...' : 'Ingatkan'}\n                      </Button>\n                    )}\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-destructive hover:text-destructive\"\n                      onClick={() => deleteDebtMutation.mutate(debt.id)}\n                      disabled={deleteDebtMutation.isPending}\n                      data-testid=\"button-delete-debt\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      {deleteDebtMutation.isPending ? 'Hapus...' : 'Hapus'}\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {editingDebt && (\n        <EditDebtModal\n          isOpen={!!editingDebt}\n          onClose={() => setEditingDebt(null)}\n          debt={editingDebt}\n        />\n      )}\n    </>\n  );\n}","size_bytes":8578},"client/src/components/customers/debt-payment-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useStore } from \"@/hooks/useStore\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { z } from \"zod\";\n\nconst paymentSchema = z.object({\n  amount: z.string().min(1, \"Jumlah bayar wajib diisi\"),\n  paymentMethod: z.string().min(1, \"Metode pembayaran wajib dipilih\"),\n  notes: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\ninterface DebtPaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  debt: any;\n}\n\nexport default function DebtPaymentModal({ \n  isOpen, \n  onClose, \n  debt \n}: DebtPaymentModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeStoreId } = useStore();\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      amount: \"\",\n      paymentMethod: \"\",\n      notes: \"\",\n    },\n  });\n\n  const payDebtMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const amountPaid = parseFloat(paymentData.amount);\n      const currentPaidAmount = parseFloat(debt.paidAmount || '0');\n      const newPaidAmount = currentPaidAmount + amountPaid;\n      const totalAmount = parseFloat(debt.amount);\n      \n      return await apiRequest(\"PUT\", `/api/debts/${debt.id}`, {\n        paidAmount: newPaidAmount.toString(),\n        status: newPaidAmount >= totalAmount ? \"paid\" : \"pending\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Pembayaran piutang berhasil dicatat\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [`/api/stores/${activeStoreId}/debts`] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [`/api/stores/${activeStoreId}/dashboard`] \n      });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mencatat pembayaran\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentFormData) => {\n    payDebtMutation.mutate(data);\n  };\n\n  const remainingDebt = debt ? parseFloat(debt.amount) - parseFloat(debt.paidAmount || '0') : 0;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm\">\n        <DialogHeader>\n          <DialogTitle>Bayar Piutang</DialogTitle>\n        </DialogHeader>\n        \n        {debt && (\n          <>\n            <div className=\"space-y-3 mb-4\">\n              <div className=\"bg-muted rounded-lg p-3\">\n                <p className=\"text-sm font-medium\">Total Piutang</p>\n                <p className=\"text-lg font-bold text-primary\" data-testid=\"text-total-debt\">\n                  {formatCurrency(parseFloat(debt.amount))}\n                </p>\n              </div>\n              \n              <div className=\"bg-muted rounded-lg p-3\">\n                <p className=\"text-sm font-medium\">Sisa Piutang</p>\n                <p className=\"text-lg font-bold text-warning\" data-testid=\"text-remaining-debt\">\n                  {formatCurrency(remainingDebt)}\n                </p>\n              </div>\n            </div>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Jumlah Bayar</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          placeholder=\"0\" \n                          {...field} \n                          data-testid=\"input-payment-amount\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"paymentMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Metode Pembayaran</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-payment-method\">\n                            <SelectValue placeholder=\"Pilih metode\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cash\">Tunai</SelectItem>\n                          <SelectItem value=\"transfer\">Transfer Bank</SelectItem>\n                          <SelectItem value=\"qris\">QRIS</SelectItem>\n                          <SelectItem value=\"ewallet\">E-Wallet</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Catatan (Opsional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Catatan pembayaran\" \n                          {...field} \n                          data-testid=\"input-payment-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex space-x-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    className=\"flex-1\" \n                    onClick={onClose}\n                    data-testid=\"button-cancel\"\n                  >\n                    Batal\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"flex-1\" \n                    disabled={payDebtMutation.isPending}\n                    data-testid=\"button-save-payment\"\n                  >\n                    {payDebtMutation.isPending ? \"Menyimpan...\" : \"Bayar\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7148},"client/src/components/customers/edit-debt-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { z } from \"zod\";\n\nconst editDebtSchema = z.object({\n  amount: z.string().min(1, \"Jumlah piutang wajib diisi\"),\n  paidAmount: z.string().optional(),\n  dueDate: z.string().optional(),\n  status: z.enum([\"pending\", \"paid\"]),\n  notes: z.string().optional(),\n});\n\ntype EditDebtFormData = z.infer<typeof editDebtSchema>;\n\ninterface EditDebtModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  debt: any;\n}\n\nexport default function EditDebtModal({ \n  isOpen, \n  onClose, \n  debt \n}: EditDebtModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<EditDebtFormData>({\n    resolver: zodResolver(editDebtSchema),\n    defaultValues: {\n      amount: debt?.amount || \"\",\n      paidAmount: debt?.paidAmount || \"0\",\n      dueDate: debt?.dueDate ? new Date(debt.dueDate).toISOString().split('T')[0] : \"\",\n      status: debt?.status || \"pending\",\n      notes: debt?.notes || \"\",\n    },\n  });\n\n  const updateDebtMutation = useMutation({\n    mutationFn: async (debtData: any) => {\n      return await apiRequest(\"PUT\", `/api/debts/${debt.id}`, debtData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Piutang berhasil diperbarui\",\n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/stores/550e8400-e29b-41d4-a716-446655440001/debts\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/customers\", debt.customerId, \"debts\"] \n      });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal memperbarui piutang\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditDebtFormData) => {\n    updateDebtMutation.mutate(data);\n  };\n\n  const remainingAmount = parseFloat(debt?.amount || '0') - parseFloat(form.watch('paidAmount') || '0');\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit Piutang</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Jumlah Piutang</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Masukkan jumlah piutang\"\n                      {...field}\n                      data-testid=\"input-debt-amount\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"paidAmount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Jumlah yang Sudah Dibayar</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      {...field}\n                      data-testid=\"input-paid-amount\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                  {remainingAmount !== parseFloat(debt?.amount || '0') && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sisa: {formatCurrency(remainingAmount)}\n                    </p>\n                  )}\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"dueDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tanggal Jatuh Tempo (Opsional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"date\"\n                      {...field}\n                      data-testid=\"input-due-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-debt-status\">\n                        <SelectValue placeholder=\"Pilih status piutang\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Belum Lunas</SelectItem>\n                      <SelectItem value=\"paid\">Lunas</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Catatan (Opsional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Catatan tambahan...\"\n                      {...field}\n                      data-testid=\"textarea-debt-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n                disabled={updateDebtMutation.isPending}\n                data-testid=\"button-cancel-edit\"\n              >\n                Batal\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={updateDebtMutation.isPending}\n                data-testid=\"button-save-debt\"\n              >\n                {updateDebtMutation.isPending ? \"Menyimpan...\" : \"Simpan\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7192},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Calculator, Package, Users, TrendingUp } from \"lucide-react\";\n\ninterface BottomNavigationProps {\n  currentPage: string;\n}\n\nexport default function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Beranda\", id: \"dashboard\" },\n    { path: \"/pos\", icon: Calculator, label: \"Kasir\", id: \"pos\" },\n    { path: \"/products\", icon: Package, label: \"Produk\", id: \"products\" },\n    { path: \"/customers\", icon: Users, label: \"Pelanggan\", id: \"customers\" },\n    { path: \"/cashflow\", icon: TrendingUp, label: \"Arus Kas\", id: \"cashflow\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-sm bg-card border-t shadow-lg\">\n      <div className=\"flex items-center justify-around py-2\">\n        {navItems.map((item) => {\n          const isActive = location === item.path;\n          const IconComponent = item.icon;\n          return (\n            <Link key={item.id} href={item.path}>\n              <a \n                className={`flex flex-col items-center space-y-1 py-2 px-4 transition-colors ${\n                  isActive ? 'text-primary' : 'text-muted-foreground hover:text-primary'\n                }`}\n                data-testid={`nav-${item.id}`}\n              >\n                <IconComponent className=\"w-5 h-5\" />\n                <span className=\"text-xs font-medium\">{item.label}</span>\n              </a>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1590},"client/src/components/layout/mobile-layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport BottomNavigation from \"./bottom-navigation\";\nimport { Store, Circle, Bell, User, LogOut, ChevronDown } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useStore } from \"@/hooks/useStore\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface MobileLayoutProps {\n  children: ReactNode;\n  currentPage: string;\n}\n\nexport default function MobileLayout({ children, currentPage }: MobileLayoutProps) {\n  const { user, logout } = useAuth();\n  const { activeStore, stores, switchStore, isLoadingStores } = useStore();\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-primary text-primary-foreground px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n            <Store className=\"w-4 h-4\" />\n          </div>\n          <div className=\"flex-1\">\n            {stores.length > 1 ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"h-auto p-0 text-left hover:bg-white/10 text-primary-foreground\">\n                    <div>\n                      <div className=\"flex items-center\">\n                        <h1 className=\"text-lg font-semibold\" data-testid=\"store-name\">\n                          {isLoadingStores ? \"Memuat...\" : (activeStore?.name || \"Pilih Toko\")}\n                        </h1>\n                        <ChevronDown className=\"w-4 h-4 ml-1\" />\n                      </div>\n                      <div className=\"flex items-center text-xs opacity-90\">\n                        <Circle className=\"w-1.5 h-1.5 text-success mr-1 fill-current\" />\n                        <span data-testid=\"sync-status\">Tersinkronisasi</span>\n                      </div>\n                    </div>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"start\" className=\"w-64\">\n                  <DropdownMenuLabel>Pilih Toko</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  {stores.map((store: any) => (\n                    <DropdownMenuItem\n                      key={store.id}\n                      onClick={() => switchStore(store.id)}\n                      className={activeStore?.id === store.id ? \"bg-accent\" : \"\"}\n                    >\n                      <Store className=\"w-4 h-4 mr-2\" />\n                      <div>\n                        <p className=\"font-medium\">{store.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{store.address}</p>\n                      </div>\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div>\n                <h1 className=\"text-lg font-semibold\" data-testid=\"store-name\">\n                  {isLoadingStores ? \"Memuat...\" : (activeStore?.name || \"BukuWarung\")}\n                </h1>\n                <div className=\"flex items-center text-xs opacity-90\">\n                  <Circle className=\"w-1.5 h-1.5 text-success mr-1 fill-current\" />\n                  <span data-testid=\"sync-status\">Tersinkronisasi</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button className=\"relative p-2 hover:bg-white/10 rounded-full\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 bg-destructive w-4 h-4 rounded-full text-xs flex items-center justify-center\">3</span>\n          </button>\n          \n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:bg-white/10 rounded-full text-primary-foreground\" data-testid=\"button-profile\">\n                <User className=\"w-5 h-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <div className=\"px-3 py-2 border-b\">\n                <p className=\"text-sm font-medium\">{user?.name}</p>\n                <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n                <p className=\"text-xs text-muted-foreground capitalize\">{user?.role}</p>\n              </div>\n              <DropdownMenuItem onClick={logout} className=\"text-destructive focus:text-destructive\" data-testid=\"button-logout\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Keluar\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"pb-20\">\n        {children}\n      </main>\n\n      {/* Bottom Navigation */}\n      <BottomNavigation currentPage={currentPage} />\n    </>\n  );\n}\n","size_bytes":5155},"client/src/components/pos/cart-item.tsx":{"content":"import { formatCurrency } from \"@/lib/currency\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CartItemProps {\n  item: {\n    id: string;\n    productId: string;\n    name: string;\n    price: number;\n    quantity: number;\n    stock: number;\n  };\n  onUpdateQuantity: (itemId: string, quantity: number) => void;\n  onRemove: (itemId: string) => void;\n}\n\nexport default function CartItem({ item, onUpdateQuantity, onRemove }: CartItemProps) {\n  return (\n    <div className=\"bg-card border rounded-lg p-3\" data-testid={`cart-item-${item.id}`}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex-1\">\n          <h4 className=\"font-medium\" data-testid=\"text-item-name\">{item.name}</h4>\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-item-price\">\n            {formatCurrency(item.price)}\n          </p>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => onRemove(item.id)}\n          className=\"p-2 hover:bg-destructive/10 text-destructive\"\n          data-testid=\"button-remove-item\"\n        >\n          <i className=\"fas fa-times\"></i>\n        </Button>\n      </div>\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onUpdateQuantity(item.id, item.quantity - 1)}\n            className=\"w-8 h-8 bg-muted rounded-full p-0 hover:bg-muted/80\"\n            data-testid=\"button-decrease-quantity\"\n          >\n            <i className=\"fas fa-minus text-xs\"></i>\n          </Button>\n          \n          <span className=\"w-12 text-center font-medium\" data-testid=\"text-item-quantity\">\n            {item.quantity}\n          </span>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}\n            className=\"w-8 h-8 bg-primary rounded-full p-0 hover:bg-primary/90 text-primary-foreground\"\n            data-testid=\"button-increase-quantity\"\n          >\n            <i className=\"fas fa-plus text-xs\"></i>\n          </Button>\n        </div>\n        \n        <div className=\"text-right\">\n          <p className=\"font-semibold\" data-testid=\"text-item-subtotal\">\n            {formatCurrency(item.price * item.quantity)}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2450},"client/src/components/pos/payment-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { formatCurrency } from \"@/lib/currency\";\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onPayment: (paymentMethod: string) => void;\n  total: number;\n  isProcessing: boolean;\n}\n\nexport default function PaymentModal({\n  isOpen,\n  onClose,\n  onPayment,\n  total,\n  isProcessing,\n}: PaymentModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm\">\n        <DialogHeader>\n          <DialogTitle>Pilih Metode Pembayaran</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"text-center p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground mb-1\">Total Pembayaran</p>\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-payment-total\">\n              {formatCurrency(total)}\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button\n              className=\"w-full success\"\n              size=\"lg\"\n              onClick={() => onPayment(\"cash\")}\n              disabled={isProcessing}\n              data-testid=\"button-pay-cash\"\n            >\n              <i className=\"fas fa-money-bill-wave mr-2\"></i>\n              Bayar Tunai\n            </Button>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => onPayment(\"transfer\")}\n                disabled={isProcessing}\n                data-testid=\"button-pay-transfer\"\n              >\n                <i className=\"fas fa-university mr-2\"></i>\n                Transfer\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={() => onPayment(\"qris\")}\n                disabled={isProcessing}\n                data-testid=\"button-pay-qris\"\n              >\n                <i className=\"fas fa-qrcode mr-2\"></i>\n                QRIS\n              </Button>\n            </div>\n            \n            <Button\n              className=\"w-full warning\"\n              onClick={() => onPayment(\"debt\")}\n              disabled={isProcessing}\n              data-testid=\"button-save-as-debt\"\n            >\n              <i className=\"fas fa-clock mr-2\"></i>\n              Simpan sebagai Piutang\n            </Button>\n          </div>\n\n          <Button\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={onClose}\n            disabled={isProcessing}\n            data-testid=\"button-cancel-payment\"\n          >\n            Batal\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2814},"client/src/components/products/add-product-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useStore } from \"@/hooks/useStore\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Nama produk wajib diisi\"),\n  sku: z.string().min(1, \"SKU wajib diisi\"),\n  priceBuy: z.string().min(1, \"Harga beli wajib diisi\"),\n  priceSell: z.string().min(1, \"Harga jual wajib diisi\"),\n  stock: z.string().min(0, \"Stok tidak boleh negatif\"),\n  unit: z.string().default(\"pcs\"),\n  category: z.string().optional(),\n});\n\ntype ProductFormData = z.infer<typeof productSchema>;\n\ninterface AddProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddProductModal({ isOpen, onClose }: AddProductModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { activeStoreId } = useStore();\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      sku: \"\",\n      priceBuy: \"\",\n      priceSell: \"\",\n      stock: \"0\",\n      unit: \"pcs\",\n      category: \"\",\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      return await apiRequest(\"POST\", `/api/stores/${activeStoreId}/products`, productData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukses\",\n        description: \"Produk berhasil ditambahkan\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/stores/${activeStoreId}/products`] });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menambahkan produk\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    createProductMutation.mutate({\n      ...data,\n      priceBuy: parseFloat(data.priceBuy).toString(),\n      priceSell: parseFloat(data.priceSell).toString(),\n      stock: parseInt(data.stock),\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm\">\n        <DialogHeader>\n          <DialogTitle>Tambah Produk Baru</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nama Produk</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Masukkan nama produk\" \n                      {...field} \n                      data-testid=\"input-product-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"sku\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>SKU</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Masukkan SKU\" \n                      {...field} \n                      data-testid=\"input-product-sku\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priceBuy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Harga Beli</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        placeholder=\"0\" \n                        {...field} \n                        data-testid=\"input-price-buy\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"priceSell\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Harga Jual</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        placeholder=\"0\" \n                        {...field} \n                        data-testid=\"input-price-sell\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"stock\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stok</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        placeholder=\"0\" \n                        {...field} \n                        data-testid=\"input-stock\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Satuan</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"pcs\" \n                        {...field} \n                        data-testid=\"input-unit\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kategori (Opsional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Masukkan kategori\" \n                      {...field} \n                      data-testid=\"input-category\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                className=\"flex-1\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Batal\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\" \n                disabled={createProductMutation.isPending}\n                data-testid=\"button-save-product\"\n              >\n                {createProductMutation.isPending ? \"Menyimpan...\" : \"Simpan\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7748},"client/src/components/products/product-card.tsx":{"content":"import { formatCurrency } from \"@/lib/currency\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ProductCardProps {\n  product: {\n    id: string;\n    name: string;\n    sku: string;\n    priceBuy: string;\n    priceSell: string;\n    stock: number;\n    unit: string;\n  };\n  onDelete: (productId: string) => void;\n}\n\nexport default function ProductCard({ product, onDelete }: ProductCardProps) {\n  const getStockStatus = () => {\n    if (product.stock === 0) {\n      return { label: \"Habis\", color: \"text-destructive\", icon: \"fa-times-circle\" };\n    } else if (product.stock <= 5) {\n      return { label: \"Stok Rendah\", color: \"text-warning\", icon: \"fa-exclamation-triangle\" };\n    }\n    return { label: \"Stok Normal\", color: \"text-success\", icon: \"fa-circle\" };\n  };\n\n  const stockStatus = getStockStatus();\n\n  return (\n    <div className=\"bg-card border rounded-lg p-4\" data-testid={`product-${product.id}`}>\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-16 h-16 bg-muted rounded-lg flex items-center justify-center\">\n          <i className=\"fas fa-image text-2xl text-muted-foreground\"></i>\n        </div>\n        \n        <div className=\"flex-1\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-product-name\">\n                {product.name}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-product-sku\">\n                SKU: {product.sku}\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onDelete(product.id)}\n              className=\"p-1 hover:bg-muted\"\n              data-testid=\"button-edit-product\"\n            >\n              <i className=\"fas fa-edit text-muted-foreground\"></i>\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-primary\" data-testid=\"text-sell-price\">\n                {formatCurrency(parseFloat(product.priceSell))}\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"text-buy-price\">\n                Beli: {formatCurrency(parseFloat(product.priceBuy))}\n              </p>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"text-sm font-medium\" data-testid=\"text-stock-quantity\">\n                  {product.stock}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">{product.unit}</span>\n              </div>\n              <div className={`flex items-center text-xs ${stockStatus.color}`} data-testid=\"text-stock-status\">\n                <i className={`fas ${stockStatus.icon} mr-1`} style={{ fontSize: '8px' }}></i>\n                <span>{stockStatus.label}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3094},"client/src/components/reports/stats-card.tsx":{"content":"interface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  icon: string;\n  color: 'success' | 'primary' | 'warning' | 'accent' | 'destructive';\n  testId?: string;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  change,\n  icon,\n  color,\n  testId,\n}: StatsCardProps) {\n  const colorClasses = {\n    success: 'text-success',\n    primary: 'text-primary',\n    warning: 'text-warning',\n    accent: 'text-accent',\n    destructive: 'text-destructive',\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-4 border shadow-sm\" data-testid={testId}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">{title}</h3>\n        <i className={`${icon} ${colorClasses[color]}`}></i>\n      </div>\n      <p className={`text-2xl font-bold ${colorClasses[color]}`} data-testid={`text-${testId}`}>\n        {value}\n      </p>\n      {change && (\n        <p className=\"text-xs text-muted-foreground mt-1\">{change}</p>\n      )}\n    </div>\n  );\n}\n","size_bytes":1043},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/receipt/receipt-generator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { useStore } from \"@/hooks/useStore\";\n\ninterface ReceiptItem {\n  productName: string;\n  quantity: number;\n  price: number;\n}\n\ninterface ReceiptData {\n  storeId: string;\n  storeName: string;\n  storePhone: string;\n  storeAddress: string;\n  invoiceNumber: string;\n  customerName?: string;\n  items: ReceiptItem[];\n  subtotal: number;\n  discount: number;\n  tax: number;\n  total: number;\n  paymentMethod: string;\n  notes?: string;\n  customContent?: string;\n  date: Date;\n}\n\ninterface ReceiptGeneratorProps {\n  receiptData: ReceiptData;\n  onClose: () => void;\n}\n\nexport default function ReceiptGenerator({ receiptData, onClose }: ReceiptGeneratorProps) {\n  const [customContent, setCustomContent] = useState(receiptData.customContent || \"\");\n  const [customAddress, setCustomAddress] = useState(receiptData.storeAddress || \"\");\n  const [customPhone, setCustomPhone] = useState(receiptData.storePhone || \"\");\n  const { activeStore } = useStore();\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('id-ID', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background z-50 overflow-y-auto\">\n      {/* Header */}\n      <div className=\"sticky top-0 bg-primary text-primary-foreground p-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <button onClick={onClose} className=\"p-2\">\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n            </svg>\n          </button>\n          <h1 className=\"text-lg font-semibold\">Pengaturan Nota</h1>\n        </div>\n        <Button onClick={handlePrint} className=\"bg-white text-primary hover:bg-gray-100\">\n          Cetak\n        </Button>\n      </div>\n\n      {/* Receipt Preview */}\n      <div className=\"p-4\">\n        <div className=\"max-w-sm mx-auto bg-white border rounded-lg p-4 print:shadow-none print:border-none\">\n          {/* Store Header */}\n          <div className=\"text-center mb-4\">\n            <h2 className=\"text-lg font-bold uppercase\">{receiptData.storeName}</h2>\n            <p className=\"text-sm text-gray-600\">{customPhone}</p>\n          </div>\n\n          {/* Transaction Info */}\n          <div className=\"border-t border-b border-dashed py-2 mb-3\">\n            <div className=\"flex justify-between text-sm\">\n              <span>{formatDate(receiptData.date)}</span>\n              <span className=\"text-blue-600\">Lunas</span>\n            </div>\n            <div className=\"text-sm\">\n              <span>INV: {receiptData.invoiceNumber}</span>\n            </div>\n          </div>\n\n          {/* Customer */}\n          {receiptData.customerName && (\n            <div className=\"mb-3\">\n              <div className=\"text-sm\">\n                <span className=\"text-gray-600\">Pelanggan:</span>\n              </div>\n            </div>\n          )}\n\n          {/* Items */}\n          <div className=\"mb-4\">\n            <div className=\"grid grid-cols-3 gap-2 text-xs font-medium border-b pb-1 mb-2\">\n              <span>Barang</span>\n              <span className=\"text-center\">Jumlah</span>\n              <span className=\"text-right\">Total</span>\n            </div>\n            {receiptData.items.map((item, index) => (\n              <div key={index} className=\"grid grid-cols-3 gap-2 text-sm mb-1\">\n                <span className=\"truncate\">{item.productName}</span>\n                <span className=\"text-center\">{item.quantity}</span>\n                <span className=\"text-right\">{formatCurrency(item.price * item.quantity)}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* Total */}\n          <div className=\"border-t border-dashed pt-2 mb-4\">\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>Total Pembayaran</span>\n              <span className=\"font-bold\">Rp{receiptData.total.toLocaleString('id-ID')}</span>\n            </div>\n            <div className=\"text-xs text-gray-600\">\n              <span>Catatan:</span>\n            </div>\n          </div>\n\n          {/* Footer/Branding */}\n          <div className=\"text-center text-xs text-gray-500 mb-4\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded flex items-center justify-center text-white font-bold text-xs mr-2\">\n                BW\n              </div>\n              <span>Dibuat pakai aplikasi BukuWarung</span>\n            </div>\n            <p>www.bukuwarung.com</p>\n          </div>\n\n          {/* Custom Content Section */}\n          <div className=\"border-t pt-4\">\n            <h3 className=\"text-sm font-medium mb-2\">Pengaturan Konten</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 border border-dashed rounded flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                  </svg>\n                </div>\n                <span className=\"text-sm text-gray-600\">Upload logo</span>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Input\n                  placeholder=\"Isi alamat usaha\"\n                  value={customAddress}\n                  onChange={(e) => setCustomAddress(e.target.value)}\n                  className=\"text-sm\"\n                />\n                <Input\n                  placeholder={customPhone}\n                  value={customPhone}\n                  onChange={(e) => setCustomPhone(e.target.value)}\n                  className=\"text-sm\"\n                />\n              </div>\n\n              <div>\n                <h4 className=\"text-sm font-medium mb-2 flex items-center\">\n                  Pengaturan Logo Nota\n                  <div className=\"w-4 h-4 bg-blue-500 rounded-full ml-2 flex items-center justify-center\">\n                    <span className=\"text-white text-xs\">!</span>\n                  </div>\n                </h4>\n                <p className=\"text-xs text-gray-600 mb-2\">\n                  Logo nota kamu sedang aktif\n                </p>\n                <p className=\"text-xs text-blue-600\">\n                  Mau pake fitur ini? Yuk, selesaikan misi dan dapatkan nota eksklusif tanpa logo BukuWarung.{\" \"}\n                  <span className=\"underline\">Lihat misi</span>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"max-w-sm mx-auto mt-4\">\n          <Button className=\"w-full bg-yellow-500 hover:bg-yellow-600 text-white\" onClick={onClose}>\n            Simpan\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7463}},"version":1}